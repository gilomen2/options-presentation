{"componentChunkName":"component---gatsby-theme-mdx-deck-src-templates-deck-js","path":"/print","result":{"data":{"deck":{"id":"66fea28f-72db-528b-8642-74a107b8d4e6","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar theme = oceanicNext;\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Options All the Way Down\"), mdx(\"hr\", null), mdx(AboutMe, {\n    mdxType: \"AboutMe\"\n  }), mdx(\"hr\", null), mdx(\"h2\", null, \"What are we doing?\"), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, \"Favor specializes in \\\"Anything Delivered\\\" meaning that you can get a burger from HopDoddy, Benedryl from Walgreens, or even ask a runner to go to your house when you're out of town and bring your trash and recycling cans in from the street so your HOA doesn't get mad at you.\", mdx(\"p\", null, \"Because of the freeform nature of our service, we've traditionally had a very free-form way of ordering.\"), mdx(\"p\", null, \"However, that can sometimes make customizing items difficult for the customer and hard to understand for the runner.\"), mdx(\"p\", null, \"Lately, we've been exploring ways to build item customization that can alleviate some of those issues for places with known menus, where customization is an important part of the menu.\"), mdx(\"p\", null, \"So, how are we doing that?\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Creating Infinitely Nested Option Select Lists with React\"), mdx(Image, {\n    src: \"/static/options-list.png\",\n    style: {\n      width: '67%',\n      backgroundSize: 'contain'\n    },\n    mdxType: \"Image\"\n  }), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\",\n    \"metastring\": \"file=./examples/exampleItemStructure.json\",\n    \"file\": \"./examples/exampleItemStructure.json\"\n  }), \"{\\n  \\\"id\\\": \\\"string\\\",\\n  \\\"name\\\": \\\"string\\\",\\n  \\\"option_groups\\\": [\\n    {\\n      \\\"id\\\": \\\"string\\\",\\n      \\\"name\\\": \\\"string\\\",\\n      \\\"max_selectable\\\": \\\"number\\\",\\n      \\\"min_selectable\\\": \\\"number\\\",\\n      \\\"default_selected\\\": \\\"Array<string>\\\",\\n      \\\"options\\\": [\\n        {\\n          \\\"id\\\": \\\"string\\\",\\n          \\\"name\\\": \\\"string\\\",\\n          \\\"option_groups\\\": [\\n            {\\n              \\\"id\\\": \\\"string\\\",\\n              \\\"name\\\": \\\"string\\\",\\n              \\\"max_selectable\\\": \\\"number\\\",\\n              \\\"min_selectable\\\": \\\"number\\\",\\n              \\\"default_selected\\\": \\\"Array<string>\\\",\\n              \\\"options\\\": [\\n                {\\n                  \\\"id\\\": \\\"string\\\",\\n                  \\\"name\\\": \\\"string\\\",\\n                  \\\"option_groups\\\": [\\n\\n                  ]\\n                }\\n              ]\\n            }\\n          ]\\n        }\\n      ]\\n    }\\n  ]\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\",\n    \"metastring\": \"2:4 file=./examples/exampleItemStructure.json\",\n    \"2:4\": true,\n    \"file\": \"./examples/exampleItemStructure.json\"\n  }), \"{\\n  \\\"id\\\": \\\"string\\\",\\n  \\\"name\\\": \\\"string\\\",\\n  \\\"option_groups\\\": [\\n    {\\n      \\\"id\\\": \\\"string\\\",\\n      \\\"name\\\": \\\"string\\\",\\n      \\\"max_selectable\\\": \\\"number\\\",\\n      \\\"min_selectable\\\": \\\"number\\\",\\n      \\\"default_selected\\\": \\\"Array<string>\\\",\\n      \\\"options\\\": [\\n        {\\n          \\\"id\\\": \\\"string\\\",\\n          \\\"name\\\": \\\"string\\\",\\n          \\\"option_groups\\\": [\\n            {\\n              \\\"id\\\": \\\"string\\\",\\n              \\\"name\\\": \\\"string\\\",\\n              \\\"max_selectable\\\": \\\"number\\\",\\n              \\\"min_selectable\\\": \\\"number\\\",\\n              \\\"default_selected\\\": \\\"Array<string>\\\",\\n              \\\"options\\\": [\\n                {\\n                  \\\"id\\\": \\\"string\\\",\\n                  \\\"name\\\": \\\"string\\\",\\n                  \\\"option_groups\\\": [\\n\\n                  ]\\n                }\\n              ]\\n            }\\n          ]\\n        }\\n      ]\\n    }\\n  ]\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\",\n    \"metastring\": \"5:11 file=./examples/exampleItemStructure.json\",\n    \"5:11\": true,\n    \"file\": \"./examples/exampleItemStructure.json\"\n  }), \"{\\n  \\\"id\\\": \\\"string\\\",\\n  \\\"name\\\": \\\"string\\\",\\n  \\\"option_groups\\\": [\\n    {\\n      \\\"id\\\": \\\"string\\\",\\n      \\\"name\\\": \\\"string\\\",\\n      \\\"max_selectable\\\": \\\"number\\\",\\n      \\\"min_selectable\\\": \\\"number\\\",\\n      \\\"default_selected\\\": \\\"Array<string>\\\",\\n      \\\"options\\\": [\\n        {\\n          \\\"id\\\": \\\"string\\\",\\n          \\\"name\\\": \\\"string\\\",\\n          \\\"option_groups\\\": [\\n            {\\n              \\\"id\\\": \\\"string\\\",\\n              \\\"name\\\": \\\"string\\\",\\n              \\\"max_selectable\\\": \\\"number\\\",\\n              \\\"min_selectable\\\": \\\"number\\\",\\n              \\\"default_selected\\\": \\\"Array<string>\\\",\\n              \\\"options\\\": [\\n                {\\n                  \\\"id\\\": \\\"string\\\",\\n                  \\\"name\\\": \\\"string\\\",\\n                  \\\"option_groups\\\": [\\n\\n                  ]\\n                }\\n              ]\\n            }\\n          ]\\n        }\\n      ]\\n    }\\n  ]\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\",\n    \"metastring\": \"13:15 file=./examples/exampleItemStructure.json\",\n    \"13:15\": true,\n    \"file\": \"./examples/exampleItemStructure.json\"\n  }), \"{\\n  \\\"id\\\": \\\"string\\\",\\n  \\\"name\\\": \\\"string\\\",\\n  \\\"option_groups\\\": [\\n    {\\n      \\\"id\\\": \\\"string\\\",\\n      \\\"name\\\": \\\"string\\\",\\n      \\\"max_selectable\\\": \\\"number\\\",\\n      \\\"min_selectable\\\": \\\"number\\\",\\n      \\\"default_selected\\\": \\\"Array<string>\\\",\\n      \\\"options\\\": [\\n        {\\n          \\\"id\\\": \\\"string\\\",\\n          \\\"name\\\": \\\"string\\\",\\n          \\\"option_groups\\\": [\\n            {\\n              \\\"id\\\": \\\"string\\\",\\n              \\\"name\\\": \\\"string\\\",\\n              \\\"max_selectable\\\": \\\"number\\\",\\n              \\\"min_selectable\\\": \\\"number\\\",\\n              \\\"default_selected\\\": \\\"Array<string>\\\",\\n              \\\"options\\\": [\\n                {\\n                  \\\"id\\\": \\\"string\\\",\\n                  \\\"name\\\": \\\"string\\\",\\n                  \\\"option_groups\\\": [\\n\\n                  ]\\n                }\\n              ]\\n            }\\n          ]\\n        }\\n      ]\\n    }\\n  ]\\n}\\n\"))), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, \"Recursive structure of a menu item.\", mdx(\"p\", null, \"An item has an id and name and an array of option groups. Each option group is an object that has an array of options. These are the options that are actually selectable.\"), mdx(\"p\", null, \"Options can also have their own option groups, and so on.\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"1\": true,\n    \"className\": \"language-jsx\",\n    \"metastring\": \"1 1:11 file=./examples/App.js title=\\\"Set Up Our Menu\\\"\",\n    \"1:11\": true,\n    \"file\": \"./examples/App.js\",\n    \"title\": \"\\\"Set\",\n    \"Up\": true,\n    \"Our\": true,\n    \"Menu\\\"\": true\n  }), \"export const App = ({ menuItems }) => {\\n  return (\\n    <div className='App'>\\n      <div className='menu'>\\n        {menuItems.map(item => <MenuItem\\n          key={item.id}\\n          item={item} />)}\\n      </div>\\n    </div>\\n  )\\n}\\n\\nconst MenuItem = ({ item }) => {\\n  const [currentSelections, setCurrentSelections] = useState(getDefaultSelectedItemOptions(item.option_groups))\\n\\n  const handleSetSelections = newOptionGroupSelections => {\\n    const newSelections = currentSelections.map(opt => {\\n      if (opt.id === newOptionGroupSelections.id) {\\n        return newOptionGroupSelections\\n      }\\n      return opt\\n    })\\n\\n    setCurrentSelections(newSelections)\\n  }\\n\\n  return (\\n    <div>\\n      <span className='item-name'>{item.name}</span>\\n      {item.option_groups.map(optionGroup =>\\n        <OptionGroup\\n          key={optionGroup.id}\\n          optionGroup={optionGroup}\\n          currentOptionGroupSelections={pickSelectionsForOptionGroup(optionGroup, currentSelections)}\\n          onChange={handleSetSelections}\\n        />)}\\n    </div>\\n  )\\n}\\n\\nconst OptionGroup = ({ optionGroup, currentOptionGroupSelections, onChange }) => {\\n  const {\\n    options: currentOptionGroupSelectedOptions = []\\n  } = currentOptionGroupSelections\\n\\n  const isRadioGroup = optionGroup.min_selectable === 1 && optionGroup.max_selectable === 1\\n\\n  const createNewOptionGroupSelections = (e, changedOption) => {\\n    const newOptionGroup = { ...optionGroup }\\n    const newChangedOption = { ...changedOption }\\n\\n    if (e.target.checked) {\\n      newChangedOption.option_groups = getDefaultSelectedItemOptions(newChangedOption.option_groups)\\n    }\\n\\n    newOptionGroup.options = isRadioGroup\\n      ? [newChangedOption]\\n      : e.target.checked\\n        ? [...currentOptionGroupSelectedOptions, newChangedOption]\\n        : currentOptionGroupSelectedOptions.filter(opt => opt.id !== changedOption.id)\\n\\n    onChange(newOptionGroup)\\n  }\\n\\n  const createNewParentSelections = (parentOptionId, parentOptionSelections) => changedOptionGroup => {\\n    const newParentOptionSelections = parentOptionSelections.map(opt => {\\n      const newOpt = { ...opt }\\n      if (newOpt.id === parentOptionId) {\\n        newOpt.option_groups = newOpt.option_groups.map(og => {\\n          let newOptionGroup = { ...og }\\n          if (newOptionGroup.id === changedOptionGroup.id) {\\n            newOptionGroup = changedOptionGroup\\n          }\\n          return newOptionGroup\\n        })\\n      }\\n      return newOpt\\n    })\\n\\n    const newSelections = { ...currentOptionGroupSelections }\\n    newSelections.options = newParentOptionSelections\\n\\n    onChange(newSelections)\\n  }\\n\\n  return (\\n    <div className={'option-group'}>\\n      <div className='option-group-name'>{optionGroup.name}</div>\\n      <div className='options'>\\n        {optionGroup.options.map(option => {\\n          const isSelected = !!currentOptionGroupSelectedOptions.find(opt => option.id === opt.id)\\n          return (\\n            <>\\n              <div key={option.id} className='option'>\\n                <input type={isRadioGroup ? 'radio' : 'checkbox'}\\n                  name={optionGroup.id}\\n                  id={option.id}\\n                  value={option.id}\\n                  checked={isSelected}\\n                  onChange={e => createNewOptionGroupSelections(e, option)}\\n                />\\n                <label htmlFor={option.id}>{option.name}</label>\\n              </div>\\n\\n              <div>\\n                {isSelected && option.option_groups.map(nestedOptionGroup => {\\n                  const selOpts = currentOptionGroupSelectedOptions.find(sel => sel.id === option.id)\\n                  return (\\n                    <OptionGroup\\n                      key={nestedOptionGroup.id}\\n                      optionGroup={nestedOptionGroup}\\n                      currentOptionGroupSelections={selOpts ? pickSelectionsForOptionGroup(nestedOptionGroup, selOpts.option_groups) : []}\\n                      onChange={createNewParentSelections(option.id, currentOptionGroupSelectedOptions)}\\n                    />)\\n                })}\\n              </div>\\n            </>\\n          )\\n        })}\\n      </div>\\n    </div>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"2\": true,\n    \"className\": \"language-jsx\",\n    \"metastring\": \"2 13:39 file=./examples/App.js title=\\\"Set Up Our Menu\\\"\",\n    \"13:39\": true,\n    \"file\": \"./examples/App.js\",\n    \"title\": \"\\\"Set\",\n    \"Up\": true,\n    \"Our\": true,\n    \"Menu\\\"\": true\n  }), \"export const App = ({ menuItems }) => {\\n  return (\\n    <div className='App'>\\n      <div className='menu'>\\n        {menuItems.map(item => <MenuItem\\n          key={item.id}\\n          item={item} />)}\\n      </div>\\n    </div>\\n  )\\n}\\n\\nconst MenuItem = ({ item }) => {\\n  const [currentSelections, setCurrentSelections] = useState(getDefaultSelectedItemOptions(item.option_groups))\\n\\n  const handleSetSelections = newOptionGroupSelections => {\\n    const newSelections = currentSelections.map(opt => {\\n      if (opt.id === newOptionGroupSelections.id) {\\n        return newOptionGroupSelections\\n      }\\n      return opt\\n    })\\n\\n    setCurrentSelections(newSelections)\\n  }\\n\\n  return (\\n    <div>\\n      <span className='item-name'>{item.name}</span>\\n      {item.option_groups.map(optionGroup =>\\n        <OptionGroup\\n          key={optionGroup.id}\\n          optionGroup={optionGroup}\\n          currentOptionGroupSelections={pickSelectionsForOptionGroup(optionGroup, currentSelections)}\\n          onChange={handleSetSelections}\\n        />)}\\n    </div>\\n  )\\n}\\n\\nconst OptionGroup = ({ optionGroup, currentOptionGroupSelections, onChange }) => {\\n  const {\\n    options: currentOptionGroupSelectedOptions = []\\n  } = currentOptionGroupSelections\\n\\n  const isRadioGroup = optionGroup.min_selectable === 1 && optionGroup.max_selectable === 1\\n\\n  const createNewOptionGroupSelections = (e, changedOption) => {\\n    const newOptionGroup = { ...optionGroup }\\n    const newChangedOption = { ...changedOption }\\n\\n    if (e.target.checked) {\\n      newChangedOption.option_groups = getDefaultSelectedItemOptions(newChangedOption.option_groups)\\n    }\\n\\n    newOptionGroup.options = isRadioGroup\\n      ? [newChangedOption]\\n      : e.target.checked\\n        ? [...currentOptionGroupSelectedOptions, newChangedOption]\\n        : currentOptionGroupSelectedOptions.filter(opt => opt.id !== changedOption.id)\\n\\n    onChange(newOptionGroup)\\n  }\\n\\n  const createNewParentSelections = (parentOptionId, parentOptionSelections) => changedOptionGroup => {\\n    const newParentOptionSelections = parentOptionSelections.map(opt => {\\n      const newOpt = { ...opt }\\n      if (newOpt.id === parentOptionId) {\\n        newOpt.option_groups = newOpt.option_groups.map(og => {\\n          let newOptionGroup = { ...og }\\n          if (newOptionGroup.id === changedOptionGroup.id) {\\n            newOptionGroup = changedOptionGroup\\n          }\\n          return newOptionGroup\\n        })\\n      }\\n      return newOpt\\n    })\\n\\n    const newSelections = { ...currentOptionGroupSelections }\\n    newSelections.options = newParentOptionSelections\\n\\n    onChange(newSelections)\\n  }\\n\\n  return (\\n    <div className={'option-group'}>\\n      <div className='option-group-name'>{optionGroup.name}</div>\\n      <div className='options'>\\n        {optionGroup.options.map(option => {\\n          const isSelected = !!currentOptionGroupSelectedOptions.find(opt => option.id === opt.id)\\n          return (\\n            <>\\n              <div key={option.id} className='option'>\\n                <input type={isRadioGroup ? 'radio' : 'checkbox'}\\n                  name={optionGroup.id}\\n                  id={option.id}\\n                  value={option.id}\\n                  checked={isSelected}\\n                  onChange={e => createNewOptionGroupSelections(e, option)}\\n                />\\n                <label htmlFor={option.id}>{option.name}</label>\\n              </div>\\n\\n              <div>\\n                {isSelected && option.option_groups.map(nestedOptionGroup => {\\n                  const selOpts = currentOptionGroupSelectedOptions.find(sel => sel.id === option.id)\\n                  return (\\n                    <OptionGroup\\n                      key={nestedOptionGroup.id}\\n                      optionGroup={nestedOptionGroup}\\n                      currentOptionGroupSelections={selOpts ? pickSelectionsForOptionGroup(nestedOptionGroup, selOpts.option_groups) : []}\\n                      onChange={createNewParentSelections(option.id, currentOptionGroupSelectedOptions)}\\n                    />)\\n                })}\\n              </div>\\n            </>\\n          )\\n        })}\\n      </div>\\n    </div>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"3\": true,\n    \"14\": true,\n    \"className\": \"language-jsx\",\n    \"metastring\": \"3 14 file=./examples/App.js title=\\\"Set Up Our Menu\\\"\",\n    \"file\": \"./examples/App.js\",\n    \"title\": \"\\\"Set\",\n    \"Up\": true,\n    \"Our\": true,\n    \"Menu\\\"\": true\n  }), \"export const App = ({ menuItems }) => {\\n  return (\\n    <div className='App'>\\n      <div className='menu'>\\n        {menuItems.map(item => <MenuItem\\n          key={item.id}\\n          item={item} />)}\\n      </div>\\n    </div>\\n  )\\n}\\n\\nconst MenuItem = ({ item }) => {\\n  const [currentSelections, setCurrentSelections] = useState(getDefaultSelectedItemOptions(item.option_groups))\\n\\n  const handleSetSelections = newOptionGroupSelections => {\\n    const newSelections = currentSelections.map(opt => {\\n      if (opt.id === newOptionGroupSelections.id) {\\n        return newOptionGroupSelections\\n      }\\n      return opt\\n    })\\n\\n    setCurrentSelections(newSelections)\\n  }\\n\\n  return (\\n    <div>\\n      <span className='item-name'>{item.name}</span>\\n      {item.option_groups.map(optionGroup =>\\n        <OptionGroup\\n          key={optionGroup.id}\\n          optionGroup={optionGroup}\\n          currentOptionGroupSelections={pickSelectionsForOptionGroup(optionGroup, currentSelections)}\\n          onChange={handleSetSelections}\\n        />)}\\n    </div>\\n  )\\n}\\n\\nconst OptionGroup = ({ optionGroup, currentOptionGroupSelections, onChange }) => {\\n  const {\\n    options: currentOptionGroupSelectedOptions = []\\n  } = currentOptionGroupSelections\\n\\n  const isRadioGroup = optionGroup.min_selectable === 1 && optionGroup.max_selectable === 1\\n\\n  const createNewOptionGroupSelections = (e, changedOption) => {\\n    const newOptionGroup = { ...optionGroup }\\n    const newChangedOption = { ...changedOption }\\n\\n    if (e.target.checked) {\\n      newChangedOption.option_groups = getDefaultSelectedItemOptions(newChangedOption.option_groups)\\n    }\\n\\n    newOptionGroup.options = isRadioGroup\\n      ? [newChangedOption]\\n      : e.target.checked\\n        ? [...currentOptionGroupSelectedOptions, newChangedOption]\\n        : currentOptionGroupSelectedOptions.filter(opt => opt.id !== changedOption.id)\\n\\n    onChange(newOptionGroup)\\n  }\\n\\n  const createNewParentSelections = (parentOptionId, parentOptionSelections) => changedOptionGroup => {\\n    const newParentOptionSelections = parentOptionSelections.map(opt => {\\n      const newOpt = { ...opt }\\n      if (newOpt.id === parentOptionId) {\\n        newOpt.option_groups = newOpt.option_groups.map(og => {\\n          let newOptionGroup = { ...og }\\n          if (newOptionGroup.id === changedOptionGroup.id) {\\n            newOptionGroup = changedOptionGroup\\n          }\\n          return newOptionGroup\\n        })\\n      }\\n      return newOpt\\n    })\\n\\n    const newSelections = { ...currentOptionGroupSelections }\\n    newSelections.options = newParentOptionSelections\\n\\n    onChange(newSelections)\\n  }\\n\\n  return (\\n    <div className={'option-group'}>\\n      <div className='option-group-name'>{optionGroup.name}</div>\\n      <div className='options'>\\n        {optionGroup.options.map(option => {\\n          const isSelected = !!currentOptionGroupSelectedOptions.find(opt => option.id === opt.id)\\n          return (\\n            <>\\n              <div key={option.id} className='option'>\\n                <input type={isRadioGroup ? 'radio' : 'checkbox'}\\n                  name={optionGroup.id}\\n                  id={option.id}\\n                  value={option.id}\\n                  checked={isSelected}\\n                  onChange={e => createNewOptionGroupSelections(e, option)}\\n                />\\n                <label htmlFor={option.id}>{option.name}</label>\\n              </div>\\n\\n              <div>\\n                {isSelected && option.option_groups.map(nestedOptionGroup => {\\n                  const selOpts = currentOptionGroupSelectedOptions.find(sel => sel.id === option.id)\\n                  return (\\n                    <OptionGroup\\n                      key={nestedOptionGroup.id}\\n                      optionGroup={nestedOptionGroup}\\n                      currentOptionGroupSelections={selOpts ? pickSelectionsForOptionGroup(nestedOptionGroup, selOpts.option_groups) : []}\\n                      onChange={createNewParentSelections(option.id, currentOptionGroupSelectedOptions)}\\n                    />)\\n                })}\\n              </div>\\n            </>\\n          )\\n        })}\\n      </div>\\n    </div>\\n  )\\n}\\n\"))), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, \"We're creating our App which will map over an array of menuItems and display an instance of a MenuItem component for each.\", mdx(\"p\", null, \"!!NEXT!!\"), mdx(\"p\", null, \"So, here's our MenuItem component. It takes in an item prop.\"), mdx(\"p\", null, \"!!NEXT!!\"), mdx(\"p\", null, \"We're creating a state variable called \\\"currentSelections\\\" which will represent what options are selected for our menuItem.\")), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"14\": true,\n    \"className\": \"language-jsx\",\n    \"metastring\": \"14 file=./examples/App.js\",\n    \"file\": \"./examples/App.js\"\n  }), \"export const App = ({ menuItems }) => {\\n  return (\\n    <div className='App'>\\n      <div className='menu'>\\n        {menuItems.map(item => <MenuItem\\n          key={item.id}\\n          item={item} />)}\\n      </div>\\n    </div>\\n  )\\n}\\n\\nconst MenuItem = ({ item }) => {\\n  const [currentSelections, setCurrentSelections] = useState(getDefaultSelectedItemOptions(item.option_groups))\\n\\n  const handleSetSelections = newOptionGroupSelections => {\\n    const newSelections = currentSelections.map(opt => {\\n      if (opt.id === newOptionGroupSelections.id) {\\n        return newOptionGroupSelections\\n      }\\n      return opt\\n    })\\n\\n    setCurrentSelections(newSelections)\\n  }\\n\\n  return (\\n    <div>\\n      <span className='item-name'>{item.name}</span>\\n      {item.option_groups.map(optionGroup =>\\n        <OptionGroup\\n          key={optionGroup.id}\\n          optionGroup={optionGroup}\\n          currentOptionGroupSelections={pickSelectionsForOptionGroup(optionGroup, currentSelections)}\\n          onChange={handleSetSelections}\\n        />)}\\n    </div>\\n  )\\n}\\n\\nconst OptionGroup = ({ optionGroup, currentOptionGroupSelections, onChange }) => {\\n  const {\\n    options: currentOptionGroupSelectedOptions = []\\n  } = currentOptionGroupSelections\\n\\n  const isRadioGroup = optionGroup.min_selectable === 1 && optionGroup.max_selectable === 1\\n\\n  const createNewOptionGroupSelections = (e, changedOption) => {\\n    const newOptionGroup = { ...optionGroup }\\n    const newChangedOption = { ...changedOption }\\n\\n    if (e.target.checked) {\\n      newChangedOption.option_groups = getDefaultSelectedItemOptions(newChangedOption.option_groups)\\n    }\\n\\n    newOptionGroup.options = isRadioGroup\\n      ? [newChangedOption]\\n      : e.target.checked\\n        ? [...currentOptionGroupSelectedOptions, newChangedOption]\\n        : currentOptionGroupSelectedOptions.filter(opt => opt.id !== changedOption.id)\\n\\n    onChange(newOptionGroup)\\n  }\\n\\n  const createNewParentSelections = (parentOptionId, parentOptionSelections) => changedOptionGroup => {\\n    const newParentOptionSelections = parentOptionSelections.map(opt => {\\n      const newOpt = { ...opt }\\n      if (newOpt.id === parentOptionId) {\\n        newOpt.option_groups = newOpt.option_groups.map(og => {\\n          let newOptionGroup = { ...og }\\n          if (newOptionGroup.id === changedOptionGroup.id) {\\n            newOptionGroup = changedOptionGroup\\n          }\\n          return newOptionGroup\\n        })\\n      }\\n      return newOpt\\n    })\\n\\n    const newSelections = { ...currentOptionGroupSelections }\\n    newSelections.options = newParentOptionSelections\\n\\n    onChange(newSelections)\\n  }\\n\\n  return (\\n    <div className={'option-group'}>\\n      <div className='option-group-name'>{optionGroup.name}</div>\\n      <div className='options'>\\n        {optionGroup.options.map(option => {\\n          const isSelected = !!currentOptionGroupSelectedOptions.find(opt => option.id === opt.id)\\n          return (\\n            <>\\n              <div key={option.id} className='option'>\\n                <input type={isRadioGroup ? 'radio' : 'checkbox'}\\n                  name={optionGroup.id}\\n                  id={option.id}\\n                  value={option.id}\\n                  checked={isSelected}\\n                  onChange={e => createNewOptionGroupSelections(e, option)}\\n                />\\n                <label htmlFor={option.id}>{option.name}</label>\\n              </div>\\n\\n              <div>\\n                {isSelected && option.option_groups.map(nestedOptionGroup => {\\n                  const selOpts = currentOptionGroupSelectedOptions.find(sel => sel.id === option.id)\\n                  return (\\n                    <OptionGroup\\n                      key={nestedOptionGroup.id}\\n                      optionGroup={nestedOptionGroup}\\n                      currentOptionGroupSelections={selOpts ? pickSelectionsForOptionGroup(nestedOptionGroup, selOpts.option_groups) : []}\\n                      onChange={createNewParentSelections(option.id, currentOptionGroupSelectedOptions)}\\n                    />)\\n                })}\\n              </div>\\n            </>\\n          )\\n        })}\\n      </div>\\n    </div>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\",\n    \"metastring\": \"1:11 file=./examples/exampleItemPizza.json\",\n    \"1:11\": true,\n    \"file\": \"./examples/exampleItemPizza.json\"\n  }), \"{\\n  \\\"id\\\": \\\"38c2c220-30d5-4829-8a7f-86670f396d0a\\\",\\n  \\\"name\\\": \\\"Pizza\\\",\\n  \\\"option_groups\\\": [\\n    {\\n      \\\"id\\\": \\\"d317a2a8-b294-48ab-8a04-140cea3a04c4\\\",\\n      \\\"name\\\": \\\"Select a Size\\\",\\n      \\\"max_selectable\\\": 1,\\n      \\\"min_selectable\\\": 1,\\n      \\\"default_selected\\\": [\\n\\n      ],\\n      \\\"options\\\": [\\n        {\\n          \\\"id\\\": \\\"6b0e8431-f64f-4ff0-9eba-c3924668344f\\\",\\n          \\\"name\\\": \\\"Small\\\",\\n          \\\"option_groups\\\": [\\n            {\\n              \\\"id\\\": \\\"c04757f1-c490-4474-b632-4a356f1e80f6\\\",\\n              \\\"name\\\": \\\"Select Your Crust\\\",\\n              \\\"max_selectable\\\": 1,\\n              \\\"min_selectable\\\": 1,\\n              \\\"default_selected\\\": [\\n\\n              ],\\n              \\\"options\\\": [\\n                {\\n                  \\\"id\\\": \\\"1bd88b34-fb98-41c8-8172-b5884092a137\\\",\\n                  \\\"name\\\": \\\"Thin\\\",\\n                  \\\"option_groups\\\": [\\n\\n                  ]\\n                },\\n                {\\n                  \\\"id\\\": \\\"a24ed76d-16f2-4976-aaaf-0dbf0d356ccf\\\",\\n                  \\\"name\\\": \\\"Hand-tossed\\\",\\n                  \\\"option_groups\\\": [\\n\\n                  ]\\n                },\\n                {\\n                  \\\"id\\\": \\\"a24ed76d-16f2-4976-aaaf-sh77dsh3kjha\\\",\\n                  \\\"name\\\": \\\"Pan\\\",\\n                  \\\"option_groups\\\": [\\n\\n                  ]\\n                }\\n              ]\\n            },\\n            {\\n              \\\"id\\\": \\\"b260d5cf-0724-43a5-b9d8-ac12bff3f27b\\\",\\n              \\\"name\\\": \\\"Select Your Sauce\\\",\\n              \\\"max_selectable\\\": 1,\\n              \\\"min_selectable\\\": 0,\\n              \\\"default_selected\\\": [\\n\\n              ],\\n              \\\"options\\\": [\\n                {\\n                  \\\"id\\\": \\\"2131b06c-a8a4-4732-b9a4-4765524eddcf\\\",\\n                  \\\"name\\\": \\\"Red Sauce\\\",\\n                  \\\"option_groups\\\": [\\n                    {\\n                      \\\"id\\\": \\\"a30757ac-639c-4feb-8e8d-2e17da3ebbsss\\\",\\n                      \\\"name\\\": \\\"Which Side?\\\",\\n                      \\\"max_selectable\\\": 1,\\n                      \\\"min_selectable\\\": 1,\\n                      \\\"default_selected\\\": [\\n                        \\\"6bf4cd65-c6f4-4c40-8f8c-7f655a06cbc9\\\"\\n                      ],\\n                      \\\"options\\\": [\\n                        {\\n                          \\\"id\\\": \\\"6bf4cd65-c6f4-4c40-8f8c-7f655a06cbc9\\\",\\n                          \\\"name\\\": \\\"Whole\\\",\\n                          \\\"option_groups\\\": [\\n\\n                          ]\\n                        },\\n                        {\\n                          \\\"id\\\": \\\"86a36c30-f379-4fc4-a252-58a277dc7069\\\",\\n                          \\\"name\\\": \\\"Left Half\\\",\\n                          \\\"option_groups\\\": [\\n\\n                          ]\\n                        },\\n                        {\\n                          \\\"id\\\": \\\"eb01d597-38fe-4eb2-ae1d-4cd88790ff92\\\",\\n                          \\\"name\\\": \\\"Right Half\\\",\\n                          \\\"option_groups\\\": [\\n\\n                          ]\\n                        }\\n                      ]\\n                    }\\n                  ]\\n                },\\n                {\\n                  \\\"id\\\": \\\"fce2a9a3-82e5-4581-a21b-6485e54c0748\\\",\\n                  \\\"name\\\": \\\"White Sauce\\\",\\n                  \\\"option_groups\\\": [\\n                    {\\n                      \\\"id\\\": \\\"a30757ac-639c-4feb-8e8d-2e17dadfssdf3b99\\\",\\n                      \\\"name\\\": \\\"Which Side?\\\",\\n                      \\\"max_selectable\\\": 1,\\n                      \\\"min_selectable\\\": 1,\\n                      \\\"default_selected\\\": [\\n                        \\\"6bf4cd65-c6f4-4c40-8f8c-7f655a06cbc9\\\"\\n                      ],\\n                      \\\"options\\\": [\\n                        {\\n                          \\\"id\\\": \\\"6bf4cd65-c6f4-4c40-8f8c-7f655a06cbc9\\\",\\n                          \\\"name\\\": \\\"Whole\\\",\\n                          \\\"option_groups\\\": [\\n\\n                          ]\\n                        },\\n                        {\\n                          \\\"id\\\": \\\"86a36c30-f379-4fc4-a252-58a277dc7069\\\",\\n                          \\\"name\\\": \\\"Left Half\\\",\\n                          \\\"option_groups\\\": [\\n\\n                          ]\\n                        },\\n                        {\\n                          \\\"id\\\": \\\"eb01d597-38fe-4eb2-ae1d-4cd88790ff92\\\",\\n                          \\\"name\\\": \\\"Right Half\\\",\\n                          \\\"option_groups\\\": [\\n\\n                          ]\\n                        }\\n                      ]\\n                    }\\n                  ]\\n                }\\n              ]\\n            },\\n            {\\n              \\\"id\\\": \\\"58ef07df-bfc3-49f2-baf4-a46772032a55\\\",\\n              \\\"name\\\": \\\"Select Your Toppings\\\",\\n              \\\"max_selectable\\\": 9,\\n              \\\"min_selectable\\\": 0,\\n              \\\"default_selected\\\": [\\n\\n              ],\\n              \\\"options\\\": [\\n                {\\n                  \\\"id\\\": \\\"92641f5f-b285-41c8-8264-23779ef79260\\\",\\n                  \\\"name\\\": \\\"Cheese\\\",\\n                  \\\"option_groups\\\": [\\n                    {\\n                      \\\"id\\\": \\\"a30757ac-639c-4feb-8e8d-2e17da3ebb99\\\",\\n                      \\\"name\\\": \\\"Which Side?\\\",\\n                      \\\"max_selectable\\\": 1,\\n                      \\\"min_selectable\\\": 1,\\n                      \\\"default_selected\\\": [\\n                        \\\"6bf4cd65-c6f4-4c40-8f8c-7f655a06cbc9\\\"\\n                      ],\\n                      \\\"options\\\": [\\n                        {\\n                          \\\"id\\\": \\\"6bf4cd65-c6f4-4c40-8f8c-7f655a06cbc9\\\",\\n                          \\\"name\\\": \\\"Whole\\\",\\n                          \\\"option_groups\\\": [\\n\\n                          ]\\n                        },\\n                        {\\n                          \\\"id\\\": \\\"86a36c30-f379-4fc4-a252-58a277dc7069\\\",\\n                          \\\"name\\\": \\\"Left Half\\\",\\n                          \\\"option_groups\\\": [\\n\\n                          ]\\n                        },\\n                        {\\n                          \\\"id\\\": \\\"eb01d597-38fe-4eb2-ae1d-4cd88790ff92\\\",\\n                          \\\"name\\\": \\\"Right Half\\\",\\n                          \\\"option_groups\\\": [\\n\\n                          ]\\n                        }\\n                      ]\\n                    }\\n                  ]\\n                },\\n                {\\n                  \\\"id\\\": \\\"9eb8d794-69a7-4577-8ff5-702dbb92e193\\\",\\n                  \\\"name\\\": \\\"Pepperoni\\\",\\n                  \\\"option_groups\\\": [\\n                    {\\n                      \\\"id\\\": \\\"a30757ac-639c-4feb-8e8d-2e17da3ebb945\\\",\\n                      \\\"name\\\": \\\"Which Side?\\\",\\n                      \\\"max_selectable\\\": 1,\\n                      \\\"min_selectable\\\": 1,\\n                      \\\"default_selected\\\": [\\n                        \\\"6bf4cd65-c6f4-4c40-8f8c-7f655a06cbc9\\\"\\n                      ],\\n                      \\\"options\\\": [\\n                        {\\n                          \\\"id\\\": \\\"6bf4cd65-c6f4-4c40-8f8c-7f655a06cbc9\\\",\\n                          \\\"name\\\": \\\"Whole\\\",\\n                          \\\"option_groups\\\": [\\n\\n                          ]\\n                        },\\n                        {\\n                          \\\"id\\\": \\\"86a36c30-f379-4fc4-a252-58a277dc7069\\\",\\n                          \\\"name\\\": \\\"Left Half\\\",\\n                          \\\"option_groups\\\": [\\n\\n                          ]\\n                        },\\n                        {\\n                          \\\"id\\\": \\\"eb01d597-38fe-4eb2-ae1d-4cd88790ff92\\\",\\n                          \\\"name\\\": \\\"Right Half\\\",\\n                          \\\"option_groups\\\": [\\n\\n                          ]\\n                        }\\n                      ]\\n                    }\\n                  ]\\n                },\\n                {\\n                  \\\"id\\\": \\\"f4e9c0ea-0afc-465a-a65d-d2c9a15416eb\\\",\\n                  \\\"name\\\": \\\"Sausage\\\",\\n                  \\\"option_groups\\\": [\\n                    {\\n                      \\\"id\\\": \\\"a30757ac-639c-4feb-8e8d-2e17da3bbgt\\\",\\n                      \\\"name\\\": \\\"Which Side?\\\",\\n                      \\\"max_selectable\\\": 1,\\n                      \\\"min_selectable\\\": 1,\\n                      \\\"default_selected\\\": [\\n                        \\\"6bf4cd65-c6f4-4c40-8f8c-7f655a06cbc9\\\"\\n                      ],\\n                      \\\"options\\\": [\\n                        {\\n                          \\\"id\\\": \\\"6bf4cd65-c6f4-4c40-8f8c-7f655a06cbc9\\\",\\n                          \\\"name\\\": \\\"Whole\\\",\\n                          \\\"option_groups\\\": [\\n\\n                          ]\\n                        },\\n                        {\\n                          \\\"id\\\": \\\"86a36c30-f379-4fc4-a252-58a277dc7069\\\",\\n                          \\\"name\\\": \\\"Left Half\\\",\\n                          \\\"option_groups\\\": [\\n\\n                          ]\\n                        },\\n                        {\\n                          \\\"id\\\": \\\"eb01d597-38fe-4eb2-ae1d-4cd88790ff92\\\",\\n                          \\\"name\\\": \\\"Right Half\\\",\\n                          \\\"option_groups\\\": [\\n\\n                          ]\\n                        }\\n                      ]\\n                    }\\n                  ]\\n                },\\n                {\\n                  \\\"id\\\": \\\"6e7c563b-0abe-4e50-a6ca-32d7ec2358f6\\\",\\n                  \\\"name\\\": \\\"Onions\\\",\\n                  \\\"option_groups\\\": [\\n                    {\\n                      \\\"id\\\": \\\"a30757ac-639c-4feb-8e8d-2e17d43f34bgt\\\",\\n                      \\\"name\\\": \\\"Which Side?\\\",\\n                      \\\"max_selectable\\\": 1,\\n                      \\\"min_selectable\\\": 1,\\n                      \\\"default_selected\\\": [\\n                        \\\"6bf4cd65-c6f4-4c40-8f8c-7f655a06cbc9\\\"\\n                      ],\\n                      \\\"options\\\": [\\n                        {\\n                          \\\"id\\\": \\\"6bf4cd65-c6f4-4c40-8f8c-7f655a06cbc9\\\",\\n                          \\\"name\\\": \\\"Whole\\\",\\n                          \\\"option_groups\\\": [\\n\\n                          ]\\n                        },\\n                        {\\n                          \\\"id\\\": \\\"86a36c30-f379-4fc4-a252-58a277dc7069\\\",\\n                          \\\"name\\\": \\\"Left Half\\\",\\n                          \\\"option_groups\\\": [\\n\\n                          ]\\n                        },\\n                        {\\n                          \\\"id\\\": \\\"eb01d597-38fe-4eb2-ae1d-4cd88790ff92\\\",\\n                          \\\"name\\\": \\\"Right Half\\\",\\n                          \\\"option_groups\\\": [\\n\\n                          ]\\n                        }\\n                      ]\\n                    }\\n                  ]\\n                }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n          \\\"id\\\": \\\"24bcac8e-394b-49b5-8c13-9412dbce5591\\\",\\n          \\\"name\\\": \\\"Medium\\\",\\n          \\\"option_groups\\\": [\\n            {\\n              \\\"id\\\": \\\"c04757f1-c490-4474-b632-4a356f1e80f6\\\",\\n              \\\"name\\\": \\\"Select Your Crust\\\",\\n              \\\"max_selectable\\\": 1,\\n              \\\"min_selectable\\\": 1,\\n              \\\"default_selected\\\": [\\n\\n              ],\\n              \\\"options\\\": [\\n                {\\n                  \\\"id\\\": \\\"1bd88b34-fb98-41c8-8172-b5884092a137\\\",\\n                  \\\"name\\\": \\\"Thin\\\",\\n                  \\\"option_groups\\\": [\\n\\n                  ]\\n                },\\n                {\\n                  \\\"id\\\": \\\"a24ed76d-16f2-4976-aaaf-0dbf0d356ccf\\\",\\n                  \\\"name\\\": \\\"Hand-tossed\\\",\\n                  \\\"option_groups\\\": [\\n\\n                  ]\\n                },\\n                {\\n                  \\\"id\\\": \\\"a24ed76d-16f2-4976-aaaf-sh77dsh3kjha\\\",\\n                  \\\"name\\\": \\\"Pan\\\",\\n                  \\\"option_groups\\\": [\\n\\n                  ]\\n                }\\n              ]\\n            },\\n            {\\n              \\\"id\\\": \\\"b260d5cf-0724-43a5-b9d8-ac12bff3f27b\\\",\\n              \\\"name\\\": \\\"Select Your Sauce\\\",\\n              \\\"max_selectable\\\": 1,\\n              \\\"min_selectable\\\": 0,\\n              \\\"default_selected\\\": [\\n\\n              ],\\n              \\\"options\\\": [\\n                {\\n                  \\\"id\\\": \\\"2131b06c-a8a4-4732-b9a4-4765524eddcf\\\",\\n                  \\\"name\\\": \\\"Red Sauce\\\",\\n                  \\\"option_groups\\\": [\\n                    {\\n                      \\\"id\\\": \\\"a30757ac-639c-4feb-8e8d-2e17da3ebbsss\\\",\\n                      \\\"name\\\": \\\"Which Side?\\\",\\n                      \\\"max_selectable\\\": 1,\\n                      \\\"min_selectable\\\": 1,\\n                      \\\"default_selected\\\": [\\n                        \\\"6bf4cd65-c6f4-4c40-8f8c-7f655a06cbc9\\\"\\n                      ],\\n                      \\\"options\\\": [\\n                        {\\n                          \\\"id\\\": \\\"6bf4cd65-c6f4-4c40-8f8c-7f655a06cbc9\\\",\\n                          \\\"name\\\": \\\"Whole\\\",\\n                          \\\"option_groups\\\": [\\n\\n                          ]\\n                        },\\n                        {\\n                          \\\"id\\\": \\\"86a36c30-f379-4fc4-a252-58a277dc7069\\\",\\n                          \\\"name\\\": \\\"Left Half\\\",\\n                          \\\"option_groups\\\": [\\n\\n                          ]\\n                        },\\n                        {\\n                          \\\"id\\\": \\\"eb01d597-38fe-4eb2-ae1d-4cd88790ff92\\\",\\n                          \\\"name\\\": \\\"Right Half\\\",\\n                          \\\"option_groups\\\": [\\n\\n                          ]\\n                        }\\n                      ]\\n                    }\\n                  ]\\n                },\\n                {\\n                  \\\"id\\\": \\\"fce2a9a3-82e5-4581-a21b-6485e54c0748\\\",\\n                  \\\"name\\\": \\\"White Sauce\\\",\\n                  \\\"option_groups\\\": [\\n                    {\\n                      \\\"id\\\": \\\"a30757ac-639c-4feb-8e8d-2e17dadfssdf3b99\\\",\\n                      \\\"name\\\": \\\"Which Side?\\\",\\n                      \\\"max_selectable\\\": 1,\\n                      \\\"min_selectable\\\": 1,\\n                      \\\"default_selected\\\": [\\n                        \\\"6bf4cd65-c6f4-4c40-8f8c-7f655a06cbc9\\\"\\n                      ],\\n                      \\\"options\\\": [\\n                        {\\n                          \\\"id\\\": \\\"6bf4cd65-c6f4-4c40-8f8c-7f655a06cbc9\\\",\\n                          \\\"name\\\": \\\"Whole\\\",\\n                          \\\"option_groups\\\": [\\n\\n                          ]\\n                        },\\n                        {\\n                          \\\"id\\\": \\\"86a36c30-f379-4fc4-a252-58a277dc7069\\\",\\n                          \\\"name\\\": \\\"Left Half\\\",\\n                          \\\"option_groups\\\": [\\n\\n                          ]\\n                        },\\n                        {\\n                          \\\"id\\\": \\\"eb01d597-38fe-4eb2-ae1d-4cd88790ff92\\\",\\n                          \\\"name\\\": \\\"Right Half\\\",\\n                          \\\"option_groups\\\": [\\n\\n                          ]\\n                        }\\n                      ]\\n                    }\\n                  ]\\n                }\\n              ]\\n            },\\n            {\\n              \\\"id\\\": \\\"58ef07df-bfc3-49f2-baf4-a46772032a55\\\",\\n              \\\"name\\\": \\\"Select Your Toppings\\\",\\n              \\\"max_selectable\\\": 9,\\n              \\\"min_selectable\\\": 0,\\n              \\\"default_selected\\\": [\\n\\n              ],\\n              \\\"options\\\": [\\n                {\\n                  \\\"id\\\": \\\"92641f5f-b285-41c8-8264-23779ef79260\\\",\\n                  \\\"name\\\": \\\"Cheese\\\",\\n                  \\\"option_groups\\\": [\\n                    {\\n                      \\\"id\\\": \\\"a30757ac-639c-4feb-8e8d-2e17da3ebb99\\\",\\n                      \\\"name\\\": \\\"Which Side?\\\",\\n                      \\\"max_selectable\\\": 1,\\n                      \\\"min_selectable\\\": 1,\\n                      \\\"default_selected\\\": [\\n                        \\\"6bf4cd65-c6f4-4c40-8f8c-7f655a06cbc9\\\"\\n                      ],\\n                      \\\"options\\\": [\\n                        {\\n                          \\\"id\\\": \\\"6bf4cd65-c6f4-4c40-8f8c-7f655a06cbc9\\\",\\n                          \\\"name\\\": \\\"Whole\\\",\\n                          \\\"option_groups\\\": [\\n\\n                          ]\\n                        },\\n                        {\\n                          \\\"id\\\": \\\"86a36c30-f379-4fc4-a252-58a277dc7069\\\",\\n                          \\\"name\\\": \\\"Left Half\\\",\\n                          \\\"option_groups\\\": [\\n\\n                          ]\\n                        },\\n                        {\\n                          \\\"id\\\": \\\"eb01d597-38fe-4eb2-ae1d-4cd88790ff92\\\",\\n                          \\\"name\\\": \\\"Right Half\\\",\\n                          \\\"option_groups\\\": [\\n\\n                          ]\\n                        }\\n                      ]\\n                    }\\n                  ]\\n                },\\n                {\\n                  \\\"id\\\": \\\"9eb8d794-69a7-4577-8ff5-702dbb92e193\\\",\\n                  \\\"name\\\": \\\"Pepperoni\\\",\\n                  \\\"option_groups\\\": [\\n                    {\\n                      \\\"id\\\": \\\"a30757ac-639c-4feb-8e8d-2e17da3ebb945\\\",\\n                      \\\"name\\\": \\\"Which Side?\\\",\\n                      \\\"max_selectable\\\": 1,\\n                      \\\"min_selectable\\\": 1,\\n                      \\\"default_selected\\\": [\\n                        \\\"6bf4cd65-c6f4-4c40-8f8c-7f655a06cbc9\\\"\\n                      ],\\n                      \\\"options\\\": [\\n                        {\\n                          \\\"id\\\": \\\"6bf4cd65-c6f4-4c40-8f8c-7f655a06cbc9\\\",\\n                          \\\"name\\\": \\\"Whole\\\",\\n                          \\\"option_groups\\\": [\\n\\n                          ]\\n                        },\\n                        {\\n                          \\\"id\\\": \\\"86a36c30-f379-4fc4-a252-58a277dc7069\\\",\\n                          \\\"name\\\": \\\"Left Half\\\",\\n                          \\\"option_groups\\\": [\\n\\n                          ]\\n                        },\\n                        {\\n                          \\\"id\\\": \\\"eb01d597-38fe-4eb2-ae1d-4cd88790ff92\\\",\\n                          \\\"name\\\": \\\"Right Half\\\",\\n                          \\\"option_groups\\\": [\\n\\n                          ]\\n                        }\\n                      ]\\n                    }\\n                  ]\\n                },\\n                {\\n                  \\\"id\\\": \\\"f4e9c0ea-0afc-465a-a65d-d2c9a15416eb\\\",\\n                  \\\"name\\\": \\\"Sausage\\\",\\n                  \\\"option_groups\\\": [\\n                    {\\n                      \\\"id\\\": \\\"a30757ac-639c-4feb-8e8d-2e17da3bbgt\\\",\\n                      \\\"name\\\": \\\"Which Side?\\\",\\n                      \\\"max_selectable\\\": 1,\\n                      \\\"min_selectable\\\": 1,\\n                      \\\"default_selected\\\": [\\n                        \\\"6bf4cd65-c6f4-4c40-8f8c-7f655a06cbc9\\\"\\n                      ],\\n                      \\\"options\\\": [\\n                        {\\n                          \\\"id\\\": \\\"6bf4cd65-c6f4-4c40-8f8c-7f655a06cbc9\\\",\\n                          \\\"name\\\": \\\"Whole\\\",\\n                          \\\"option_groups\\\": [\\n\\n                          ]\\n                        },\\n                        {\\n                          \\\"id\\\": \\\"86a36c30-f379-4fc4-a252-58a277dc7069\\\",\\n                          \\\"name\\\": \\\"Left Half\\\",\\n                          \\\"option_groups\\\": [\\n\\n                          ]\\n                        },\\n                        {\\n                          \\\"id\\\": \\\"eb01d597-38fe-4eb2-ae1d-4cd88790ff92\\\",\\n                          \\\"name\\\": \\\"Right Half\\\",\\n                          \\\"option_groups\\\": [\\n\\n                          ]\\n                        }\\n                      ]\\n                    }\\n                  ]\\n                },\\n                {\\n                  \\\"id\\\": \\\"6e7c563b-0abe-4e50-a6ca-32d7ec2358f6\\\",\\n                  \\\"name\\\": \\\"Onions\\\",\\n                  \\\"option_groups\\\": [\\n                    {\\n                      \\\"id\\\": \\\"a30757ac-639c-4feb-8e8d-2e17d43f34bgt\\\",\\n                      \\\"name\\\": \\\"Which Side?\\\",\\n                      \\\"max_selectable\\\": 1,\\n                      \\\"min_selectable\\\": 1,\\n                      \\\"default_selected\\\": [\\n                        \\\"6bf4cd65-c6f4-4c40-8f8c-7f655a06cbc9\\\"\\n                      ],\\n                      \\\"options\\\": [\\n                        {\\n                          \\\"id\\\": \\\"6bf4cd65-c6f4-4c40-8f8c-7f655a06cbc9\\\",\\n                          \\\"name\\\": \\\"Whole\\\",\\n                          \\\"option_groups\\\": [\\n\\n                          ]\\n                        },\\n                        {\\n                          \\\"id\\\": \\\"86a36c30-f379-4fc4-a252-58a277dc7069\\\",\\n                          \\\"name\\\": \\\"Left Half\\\",\\n                          \\\"option_groups\\\": [\\n\\n                          ]\\n                        },\\n                        {\\n                          \\\"id\\\": \\\"eb01d597-38fe-4eb2-ae1d-4cd88790ff92\\\",\\n                          \\\"name\\\": \\\"Right Half\\\",\\n                          \\\"option_groups\\\": [\\n\\n                          ]\\n                        }\\n                      ]\\n                    }\\n                  ]\\n                }\\n              ]\\n            }\\n          ]\\n        },\\n        {\\n          \\\"id\\\": \\\"9700bd22-807a-4884-ab6f-ad3d33f37efb\\\",\\n          \\\"name\\\": \\\"Large\\\",\\n          \\\"option_groups\\\": [\\n            {\\n              \\\"id\\\": \\\"c04757f1-c490-4474-b632-4a356f1e80f6\\\",\\n              \\\"name\\\": \\\"Select Your Crust\\\",\\n              \\\"max_selectable\\\": 1,\\n              \\\"min_selectable\\\": 1,\\n              \\\"default_selected\\\": [\\n\\n              ],\\n              \\\"options\\\": [\\n                {\\n                  \\\"id\\\": \\\"1bd88b34-fb98-41c8-8172-b5884092a137\\\",\\n                  \\\"name\\\": \\\"Thin\\\",\\n                  \\\"option_groups\\\": [\\n\\n                  ]\\n                },\\n                {\\n                  \\\"id\\\": \\\"a24ed76d-16f2-4976-aaaf-0dbf0d356ccf\\\",\\n                  \\\"name\\\": \\\"Hand-tossed\\\",\\n                  \\\"option_groups\\\": [\\n\\n                  ]\\n                },\\n                {\\n                  \\\"id\\\": \\\"a24ed76d-16f2-4976-aaaf-sh77dsh3kjha\\\",\\n                  \\\"name\\\": \\\"Pan\\\",\\n                  \\\"option_groups\\\": [\\n\\n                  ]\\n                }\\n              ]\\n            },\\n            {\\n              \\\"id\\\": \\\"b260d5cf-0724-43a5-b9d8-ac12bff3f27b\\\",\\n              \\\"name\\\": \\\"Select Your Sauce\\\",\\n              \\\"max_selectable\\\": 1,\\n              \\\"min_selectable\\\": 0,\\n              \\\"default_selected\\\": [\\n\\n              ],\\n              \\\"options\\\": [\\n                {\\n                  \\\"id\\\": \\\"2131b06c-a8a4-4732-b9a4-4765524eddcf\\\",\\n                  \\\"name\\\": \\\"Red Sauce\\\",\\n                  \\\"option_groups\\\": [\\n                    {\\n                      \\\"id\\\": \\\"a30757ac-639c-4feb-8e8d-2e17da3ebbsss\\\",\\n                      \\\"name\\\": \\\"Which Side?\\\",\\n                      \\\"max_selectable\\\": 1,\\n                      \\\"min_selectable\\\": 1,\\n                      \\\"default_selected\\\": [\\n                        \\\"6bf4cd65-c6f4-4c40-8f8c-7f655a06cbc9\\\"\\n                      ],\\n                      \\\"options\\\": [\\n                        {\\n                          \\\"id\\\": \\\"6bf4cd65-c6f4-4c40-8f8c-7f655a06cbc9\\\",\\n                          \\\"name\\\": \\\"Whole\\\",\\n                          \\\"option_groups\\\": [\\n\\n                          ]\\n                        },\\n                        {\\n                          \\\"id\\\": \\\"86a36c30-f379-4fc4-a252-58a277dc7069\\\",\\n                          \\\"name\\\": \\\"Left Half\\\",\\n                          \\\"option_groups\\\": [\\n\\n                          ]\\n                        },\\n                        {\\n                          \\\"id\\\": \\\"eb01d597-38fe-4eb2-ae1d-4cd88790ff92\\\",\\n                          \\\"name\\\": \\\"Right Half\\\",\\n                          \\\"option_groups\\\": [\\n\\n                          ]\\n                        }\\n                      ]\\n                    }\\n                  ]\\n                },\\n                {\\n                  \\\"id\\\": \\\"fce2a9a3-82e5-4581-a21b-6485e54c0748\\\",\\n                  \\\"name\\\": \\\"White Sauce\\\",\\n                  \\\"option_groups\\\": [\\n                    {\\n                      \\\"id\\\": \\\"a30757ac-639c-4feb-8e8d-2e17dadfssdf3b99\\\",\\n                      \\\"name\\\": \\\"Which Side?\\\",\\n                      \\\"max_selectable\\\": 1,\\n                      \\\"min_selectable\\\": 1,\\n                      \\\"default_selected\\\": [\\n                        \\\"6bf4cd65-c6f4-4c40-8f8c-7f655a06cbc9\\\"\\n                      ],\\n                      \\\"options\\\": [\\n                        {\\n                          \\\"id\\\": \\\"6bf4cd65-c6f4-4c40-8f8c-7f655a06cbc9\\\",\\n                          \\\"name\\\": \\\"Whole\\\",\\n                          \\\"option_groups\\\": [\\n\\n                          ]\\n                        },\\n                        {\\n                          \\\"id\\\": \\\"86a36c30-f379-4fc4-a252-58a277dc7069\\\",\\n                          \\\"name\\\": \\\"Left Half\\\",\\n                          \\\"option_groups\\\": [\\n\\n                          ]\\n                        },\\n                        {\\n                          \\\"id\\\": \\\"eb01d597-38fe-4eb2-ae1d-4cd88790ff92\\\",\\n                          \\\"name\\\": \\\"Right Half\\\",\\n                          \\\"option_groups\\\": [\\n\\n                          ]\\n                        }\\n                      ]\\n                    }\\n                  ]\\n                }\\n              ]\\n            },\\n            {\\n              \\\"id\\\": \\\"58ef07df-bfc3-49f2-baf4-a46772032a55\\\",\\n              \\\"name\\\": \\\"Select Your Toppings\\\",\\n              \\\"max_selectable\\\": 9,\\n              \\\"min_selectable\\\": 0,\\n              \\\"default_selected\\\": [\\n\\n              ],\\n              \\\"options\\\": [\\n                {\\n                  \\\"id\\\": \\\"92641f5f-b285-41c8-8264-23779ef79260\\\",\\n                  \\\"name\\\": \\\"Cheese\\\",\\n                  \\\"option_groups\\\": [\\n                    {\\n                      \\\"id\\\": \\\"a30757ac-639c-4feb-8e8d-2e17da3ebb99\\\",\\n                      \\\"name\\\": \\\"Which Side?\\\",\\n                      \\\"max_selectable\\\": 1,\\n                      \\\"min_selectable\\\": 1,\\n                      \\\"default_selected\\\": [\\n                        \\\"6bf4cd65-c6f4-4c40-8f8c-7f655a06cbc9\\\"\\n                      ],\\n                      \\\"options\\\": [\\n                        {\\n                          \\\"id\\\": \\\"6bf4cd65-c6f4-4c40-8f8c-7f655a06cbc9\\\",\\n                          \\\"name\\\": \\\"Whole\\\",\\n                          \\\"option_groups\\\": [\\n\\n                          ]\\n                        },\\n                        {\\n                          \\\"id\\\": \\\"86a36c30-f379-4fc4-a252-58a277dc7069\\\",\\n                          \\\"name\\\": \\\"Left Half\\\",\\n                          \\\"option_groups\\\": [\\n\\n                          ]\\n                        },\\n                        {\\n                          \\\"id\\\": \\\"eb01d597-38fe-4eb2-ae1d-4cd88790ff92\\\",\\n                          \\\"name\\\": \\\"Right Half\\\",\\n                          \\\"option_groups\\\": [\\n\\n                          ]\\n                        }\\n                      ]\\n                    }\\n                  ]\\n                },\\n                {\\n                  \\\"id\\\": \\\"9eb8d794-69a7-4577-8ff5-702dbb92e193\\\",\\n                  \\\"name\\\": \\\"Pepperoni\\\",\\n                  \\\"option_groups\\\": [\\n                    {\\n                      \\\"id\\\": \\\"a30757ac-639c-4feb-8e8d-2e17da3ebb945\\\",\\n                      \\\"name\\\": \\\"Which Side?\\\",\\n                      \\\"max_selectable\\\": 1,\\n                      \\\"min_selectable\\\": 1,\\n                      \\\"default_selected\\\": [\\n                        \\\"6bf4cd65-c6f4-4c40-8f8c-7f655a06cbc9\\\"\\n                      ],\\n                      \\\"options\\\": [\\n                        {\\n                          \\\"id\\\": \\\"6bf4cd65-c6f4-4c40-8f8c-7f655a06cbc9\\\",\\n                          \\\"name\\\": \\\"Whole\\\",\\n                          \\\"option_groups\\\": [\\n\\n                          ]\\n                        },\\n                        {\\n                          \\\"id\\\": \\\"86a36c30-f379-4fc4-a252-58a277dc7069\\\",\\n                          \\\"name\\\": \\\"Left Half\\\",\\n                          \\\"option_groups\\\": [\\n\\n                          ]\\n                        },\\n                        {\\n                          \\\"id\\\": \\\"eb01d597-38fe-4eb2-ae1d-4cd88790ff92\\\",\\n                          \\\"name\\\": \\\"Right Half\\\",\\n                          \\\"option_groups\\\": [\\n\\n                          ]\\n                        }\\n                      ]\\n                    }\\n                  ]\\n                },\\n                {\\n                  \\\"id\\\": \\\"f4e9c0ea-0afc-465a-a65d-d2c9a15416eb\\\",\\n                  \\\"name\\\": \\\"Sausage\\\",\\n                  \\\"option_groups\\\": [\\n                    {\\n                      \\\"id\\\": \\\"a30757ac-639c-4feb-8e8d-2e17da3bbgt\\\",\\n                      \\\"name\\\": \\\"Which Side?\\\",\\n                      \\\"max_selectable\\\": 1,\\n                      \\\"min_selectable\\\": 1,\\n                      \\\"default_selected\\\": [\\n                        \\\"6bf4cd65-c6f4-4c40-8f8c-7f655a06cbc9\\\"\\n                      ],\\n                      \\\"options\\\": [\\n                        {\\n                          \\\"id\\\": \\\"6bf4cd65-c6f4-4c40-8f8c-7f655a06cbc9\\\",\\n                          \\\"name\\\": \\\"Whole\\\",\\n                          \\\"option_groups\\\": [\\n\\n                          ]\\n                        },\\n                        {\\n                          \\\"id\\\": \\\"86a36c30-f379-4fc4-a252-58a277dc7069\\\",\\n                          \\\"name\\\": \\\"Left Half\\\",\\n                          \\\"option_groups\\\": [\\n\\n                          ]\\n                        },\\n                        {\\n                          \\\"id\\\": \\\"eb01d597-38fe-4eb2-ae1d-4cd88790ff92\\\",\\n                          \\\"name\\\": \\\"Right Half\\\",\\n                          \\\"option_groups\\\": [\\n\\n                          ]\\n                        }\\n                      ]\\n                    }\\n                  ]\\n                },\\n                {\\n                  \\\"id\\\": \\\"6e7c563b-0abe-4e50-a6ca-32d7ec2358f6\\\",\\n                  \\\"name\\\": \\\"Onions\\\",\\n                  \\\"option_groups\\\": [\\n                    {\\n                      \\\"id\\\": \\\"a30757ac-639c-4feb-8e8d-2e17d43f34bgt\\\",\\n                      \\\"name\\\": \\\"Which Side?\\\",\\n                      \\\"max_selectable\\\": 1,\\n                      \\\"min_selectable\\\": 1,\\n                      \\\"default_selected\\\": [\\n                        \\\"6bf4cd65-c6f4-4c40-8f8c-7f655a06cbc9\\\"\\n                      ],\\n                      \\\"options\\\": [\\n                        {\\n                          \\\"id\\\": \\\"6bf4cd65-c6f4-4c40-8f8c-7f655a06cbc9\\\",\\n                          \\\"name\\\": \\\"Whole\\\",\\n                          \\\"option_groups\\\": [\\n\\n                          ]\\n                        },\\n                        {\\n                          \\\"id\\\": \\\"86a36c30-f379-4fc4-a252-58a277dc7069\\\",\\n                          \\\"name\\\": \\\"Left Half\\\",\\n                          \\\"option_groups\\\": [\\n\\n                          ]\\n                        },\\n                        {\\n                          \\\"id\\\": \\\"eb01d597-38fe-4eb2-ae1d-4cd88790ff92\\\",\\n                          \\\"name\\\": \\\"Right Half\\\",\\n                          \\\"option_groups\\\": [\\n\\n                          ]\\n                        }\\n                      ]\\n                    }\\n                  ]\\n                }\\n              ]\\n            }\\n          ]\\n        }\\n      ]\\n    }\\n  ]\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"1\": true,\n    \"14\": true,\n    \"className\": \"language-jsx\",\n    \"metastring\": \"1 14 file=./examples/App.js\",\n    \"file\": \"./examples/App.js\"\n  }), \"export const App = ({ menuItems }) => {\\n  return (\\n    <div className='App'>\\n      <div className='menu'>\\n        {menuItems.map(item => <MenuItem\\n          key={item.id}\\n          item={item} />)}\\n      </div>\\n    </div>\\n  )\\n}\\n\\nconst MenuItem = ({ item }) => {\\n  const [currentSelections, setCurrentSelections] = useState(getDefaultSelectedItemOptions(item.option_groups))\\n\\n  const handleSetSelections = newOptionGroupSelections => {\\n    const newSelections = currentSelections.map(opt => {\\n      if (opt.id === newOptionGroupSelections.id) {\\n        return newOptionGroupSelections\\n      }\\n      return opt\\n    })\\n\\n    setCurrentSelections(newSelections)\\n  }\\n\\n  return (\\n    <div>\\n      <span className='item-name'>{item.name}</span>\\n      {item.option_groups.map(optionGroup =>\\n        <OptionGroup\\n          key={optionGroup.id}\\n          optionGroup={optionGroup}\\n          currentOptionGroupSelections={pickSelectionsForOptionGroup(optionGroup, currentSelections)}\\n          onChange={handleSetSelections}\\n        />)}\\n    </div>\\n  )\\n}\\n\\nconst OptionGroup = ({ optionGroup, currentOptionGroupSelections, onChange }) => {\\n  const {\\n    options: currentOptionGroupSelectedOptions = []\\n  } = currentOptionGroupSelections\\n\\n  const isRadioGroup = optionGroup.min_selectable === 1 && optionGroup.max_selectable === 1\\n\\n  const createNewOptionGroupSelections = (e, changedOption) => {\\n    const newOptionGroup = { ...optionGroup }\\n    const newChangedOption = { ...changedOption }\\n\\n    if (e.target.checked) {\\n      newChangedOption.option_groups = getDefaultSelectedItemOptions(newChangedOption.option_groups)\\n    }\\n\\n    newOptionGroup.options = isRadioGroup\\n      ? [newChangedOption]\\n      : e.target.checked\\n        ? [...currentOptionGroupSelectedOptions, newChangedOption]\\n        : currentOptionGroupSelectedOptions.filter(opt => opt.id !== changedOption.id)\\n\\n    onChange(newOptionGroup)\\n  }\\n\\n  const createNewParentSelections = (parentOptionId, parentOptionSelections) => changedOptionGroup => {\\n    const newParentOptionSelections = parentOptionSelections.map(opt => {\\n      const newOpt = { ...opt }\\n      if (newOpt.id === parentOptionId) {\\n        newOpt.option_groups = newOpt.option_groups.map(og => {\\n          let newOptionGroup = { ...og }\\n          if (newOptionGroup.id === changedOptionGroup.id) {\\n            newOptionGroup = changedOptionGroup\\n          }\\n          return newOptionGroup\\n        })\\n      }\\n      return newOpt\\n    })\\n\\n    const newSelections = { ...currentOptionGroupSelections }\\n    newSelections.options = newParentOptionSelections\\n\\n    onChange(newSelections)\\n  }\\n\\n  return (\\n    <div className={'option-group'}>\\n      <div className='option-group-name'>{optionGroup.name}</div>\\n      <div className='options'>\\n        {optionGroup.options.map(option => {\\n          const isSelected = !!currentOptionGroupSelectedOptions.find(opt => option.id === opt.id)\\n          return (\\n            <>\\n              <div key={option.id} className='option'>\\n                <input type={isRadioGroup ? 'radio' : 'checkbox'}\\n                  name={optionGroup.id}\\n                  id={option.id}\\n                  value={option.id}\\n                  checked={isSelected}\\n                  onChange={e => createNewOptionGroupSelections(e, option)}\\n                />\\n                <label htmlFor={option.id}>{option.name}</label>\\n              </div>\\n\\n              <div>\\n                {isSelected && option.option_groups.map(nestedOptionGroup => {\\n                  const selOpts = currentOptionGroupSelectedOptions.find(sel => sel.id === option.id)\\n                  return (\\n                    <OptionGroup\\n                      key={nestedOptionGroup.id}\\n                      optionGroup={nestedOptionGroup}\\n                      currentOptionGroupSelections={selOpts ? pickSelectionsForOptionGroup(nestedOptionGroup, selOpts.option_groups) : []}\\n                      onChange={createNewParentSelections(option.id, currentOptionGroupSelectedOptions)}\\n                    />)\\n                })}\\n              </div>\\n            </>\\n          )\\n        })}\\n      </div>\\n    </div>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"[\\n  {\\n    \\\"id\\\": \\\"d317a2a8-b294-48ab-8a04-140cea3a04c4\\\",\\n    \\\"name\\\": \\\"Select a Size\\\",\\n    \\\"options\\\": []\\n  }\\n]\\n\")))), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, \"We're giving it an initial state that represents anything that is selected by default for our top-level option groups. This item only has one top-level option group called \\\"Select a Size\\\" and nothing is selected by default, so our currentSelections looks like this.\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"1\": true,\n    \"className\": \"language-jsx\",\n    \"metastring\": \"1 16:25 file=./examples/App.js\",\n    \"16:25\": true,\n    \"file\": \"./examples/App.js\"\n  }), \"export const App = ({ menuItems }) => {\\n  return (\\n    <div className='App'>\\n      <div className='menu'>\\n        {menuItems.map(item => <MenuItem\\n          key={item.id}\\n          item={item} />)}\\n      </div>\\n    </div>\\n  )\\n}\\n\\nconst MenuItem = ({ item }) => {\\n  const [currentSelections, setCurrentSelections] = useState(getDefaultSelectedItemOptions(item.option_groups))\\n\\n  const handleSetSelections = newOptionGroupSelections => {\\n    const newSelections = currentSelections.map(opt => {\\n      if (opt.id === newOptionGroupSelections.id) {\\n        return newOptionGroupSelections\\n      }\\n      return opt\\n    })\\n\\n    setCurrentSelections(newSelections)\\n  }\\n\\n  return (\\n    <div>\\n      <span className='item-name'>{item.name}</span>\\n      {item.option_groups.map(optionGroup =>\\n        <OptionGroup\\n          key={optionGroup.id}\\n          optionGroup={optionGroup}\\n          currentOptionGroupSelections={pickSelectionsForOptionGroup(optionGroup, currentSelections)}\\n          onChange={handleSetSelections}\\n        />)}\\n    </div>\\n  )\\n}\\n\\nconst OptionGroup = ({ optionGroup, currentOptionGroupSelections, onChange }) => {\\n  const {\\n    options: currentOptionGroupSelectedOptions = []\\n  } = currentOptionGroupSelections\\n\\n  const isRadioGroup = optionGroup.min_selectable === 1 && optionGroup.max_selectable === 1\\n\\n  const createNewOptionGroupSelections = (e, changedOption) => {\\n    const newOptionGroup = { ...optionGroup }\\n    const newChangedOption = { ...changedOption }\\n\\n    if (e.target.checked) {\\n      newChangedOption.option_groups = getDefaultSelectedItemOptions(newChangedOption.option_groups)\\n    }\\n\\n    newOptionGroup.options = isRadioGroup\\n      ? [newChangedOption]\\n      : e.target.checked\\n        ? [...currentOptionGroupSelectedOptions, newChangedOption]\\n        : currentOptionGroupSelectedOptions.filter(opt => opt.id !== changedOption.id)\\n\\n    onChange(newOptionGroup)\\n  }\\n\\n  const createNewParentSelections = (parentOptionId, parentOptionSelections) => changedOptionGroup => {\\n    const newParentOptionSelections = parentOptionSelections.map(opt => {\\n      const newOpt = { ...opt }\\n      if (newOpt.id === parentOptionId) {\\n        newOpt.option_groups = newOpt.option_groups.map(og => {\\n          let newOptionGroup = { ...og }\\n          if (newOptionGroup.id === changedOptionGroup.id) {\\n            newOptionGroup = changedOptionGroup\\n          }\\n          return newOptionGroup\\n        })\\n      }\\n      return newOpt\\n    })\\n\\n    const newSelections = { ...currentOptionGroupSelections }\\n    newSelections.options = newParentOptionSelections\\n\\n    onChange(newSelections)\\n  }\\n\\n  return (\\n    <div className={'option-group'}>\\n      <div className='option-group-name'>{optionGroup.name}</div>\\n      <div className='options'>\\n        {optionGroup.options.map(option => {\\n          const isSelected = !!currentOptionGroupSelectedOptions.find(opt => option.id === opt.id)\\n          return (\\n            <>\\n              <div key={option.id} className='option'>\\n                <input type={isRadioGroup ? 'radio' : 'checkbox'}\\n                  name={optionGroup.id}\\n                  id={option.id}\\n                  value={option.id}\\n                  checked={isSelected}\\n                  onChange={e => createNewOptionGroupSelections(e, option)}\\n                />\\n                <label htmlFor={option.id}>{option.name}</label>\\n              </div>\\n\\n              <div>\\n                {isSelected && option.option_groups.map(nestedOptionGroup => {\\n                  const selOpts = currentOptionGroupSelectedOptions.find(sel => sel.id === option.id)\\n                  return (\\n                    <OptionGroup\\n                      key={nestedOptionGroup.id}\\n                      optionGroup={nestedOptionGroup}\\n                      currentOptionGroupSelections={selOpts ? pickSelectionsForOptionGroup(nestedOptionGroup, selOpts.option_groups) : []}\\n                      onChange={createNewParentSelections(option.id, currentOptionGroupSelectedOptions)}\\n                    />)\\n                })}\\n              </div>\\n            </>\\n          )\\n        })}\\n      </div>\\n    </div>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"2\": true,\n    \"className\": \"language-jsx\",\n    \"metastring\": \"2 17:22 file=./examples/App.js\",\n    \"17:22\": true,\n    \"file\": \"./examples/App.js\"\n  }), \"export const App = ({ menuItems }) => {\\n  return (\\n    <div className='App'>\\n      <div className='menu'>\\n        {menuItems.map(item => <MenuItem\\n          key={item.id}\\n          item={item} />)}\\n      </div>\\n    </div>\\n  )\\n}\\n\\nconst MenuItem = ({ item }) => {\\n  const [currentSelections, setCurrentSelections] = useState(getDefaultSelectedItemOptions(item.option_groups))\\n\\n  const handleSetSelections = newOptionGroupSelections => {\\n    const newSelections = currentSelections.map(opt => {\\n      if (opt.id === newOptionGroupSelections.id) {\\n        return newOptionGroupSelections\\n      }\\n      return opt\\n    })\\n\\n    setCurrentSelections(newSelections)\\n  }\\n\\n  return (\\n    <div>\\n      <span className='item-name'>{item.name}</span>\\n      {item.option_groups.map(optionGroup =>\\n        <OptionGroup\\n          key={optionGroup.id}\\n          optionGroup={optionGroup}\\n          currentOptionGroupSelections={pickSelectionsForOptionGroup(optionGroup, currentSelections)}\\n          onChange={handleSetSelections}\\n        />)}\\n    </div>\\n  )\\n}\\n\\nconst OptionGroup = ({ optionGroup, currentOptionGroupSelections, onChange }) => {\\n  const {\\n    options: currentOptionGroupSelectedOptions = []\\n  } = currentOptionGroupSelections\\n\\n  const isRadioGroup = optionGroup.min_selectable === 1 && optionGroup.max_selectable === 1\\n\\n  const createNewOptionGroupSelections = (e, changedOption) => {\\n    const newOptionGroup = { ...optionGroup }\\n    const newChangedOption = { ...changedOption }\\n\\n    if (e.target.checked) {\\n      newChangedOption.option_groups = getDefaultSelectedItemOptions(newChangedOption.option_groups)\\n    }\\n\\n    newOptionGroup.options = isRadioGroup\\n      ? [newChangedOption]\\n      : e.target.checked\\n        ? [...currentOptionGroupSelectedOptions, newChangedOption]\\n        : currentOptionGroupSelectedOptions.filter(opt => opt.id !== changedOption.id)\\n\\n    onChange(newOptionGroup)\\n  }\\n\\n  const createNewParentSelections = (parentOptionId, parentOptionSelections) => changedOptionGroup => {\\n    const newParentOptionSelections = parentOptionSelections.map(opt => {\\n      const newOpt = { ...opt }\\n      if (newOpt.id === parentOptionId) {\\n        newOpt.option_groups = newOpt.option_groups.map(og => {\\n          let newOptionGroup = { ...og }\\n          if (newOptionGroup.id === changedOptionGroup.id) {\\n            newOptionGroup = changedOptionGroup\\n          }\\n          return newOptionGroup\\n        })\\n      }\\n      return newOpt\\n    })\\n\\n    const newSelections = { ...currentOptionGroupSelections }\\n    newSelections.options = newParentOptionSelections\\n\\n    onChange(newSelections)\\n  }\\n\\n  return (\\n    <div className={'option-group'}>\\n      <div className='option-group-name'>{optionGroup.name}</div>\\n      <div className='options'>\\n        {optionGroup.options.map(option => {\\n          const isSelected = !!currentOptionGroupSelectedOptions.find(opt => option.id === opt.id)\\n          return (\\n            <>\\n              <div key={option.id} className='option'>\\n                <input type={isRadioGroup ? 'radio' : 'checkbox'}\\n                  name={optionGroup.id}\\n                  id={option.id}\\n                  value={option.id}\\n                  checked={isSelected}\\n                  onChange={e => createNewOptionGroupSelections(e, option)}\\n                />\\n                <label htmlFor={option.id}>{option.name}</label>\\n              </div>\\n\\n              <div>\\n                {isSelected && option.option_groups.map(nestedOptionGroup => {\\n                  const selOpts = currentOptionGroupSelectedOptions.find(sel => sel.id === option.id)\\n                  return (\\n                    <OptionGroup\\n                      key={nestedOptionGroup.id}\\n                      optionGroup={nestedOptionGroup}\\n                      currentOptionGroupSelections={selOpts ? pickSelectionsForOptionGroup(nestedOptionGroup, selOpts.option_groups) : []}\\n                      onChange={createNewParentSelections(option.id, currentOptionGroupSelectedOptions)}\\n                    />)\\n                })}\\n              </div>\\n            </>\\n          )\\n        })}\\n      </div>\\n    </div>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"3\": true,\n    \"24\": true,\n    \"className\": \"language-jsx\",\n    \"metastring\": \"3 24 file=./examples/App.js\",\n    \"file\": \"./examples/App.js\"\n  }), \"export const App = ({ menuItems }) => {\\n  return (\\n    <div className='App'>\\n      <div className='menu'>\\n        {menuItems.map(item => <MenuItem\\n          key={item.id}\\n          item={item} />)}\\n      </div>\\n    </div>\\n  )\\n}\\n\\nconst MenuItem = ({ item }) => {\\n  const [currentSelections, setCurrentSelections] = useState(getDefaultSelectedItemOptions(item.option_groups))\\n\\n  const handleSetSelections = newOptionGroupSelections => {\\n    const newSelections = currentSelections.map(opt => {\\n      if (opt.id === newOptionGroupSelections.id) {\\n        return newOptionGroupSelections\\n      }\\n      return opt\\n    })\\n\\n    setCurrentSelections(newSelections)\\n  }\\n\\n  return (\\n    <div>\\n      <span className='item-name'>{item.name}</span>\\n      {item.option_groups.map(optionGroup =>\\n        <OptionGroup\\n          key={optionGroup.id}\\n          optionGroup={optionGroup}\\n          currentOptionGroupSelections={pickSelectionsForOptionGroup(optionGroup, currentSelections)}\\n          onChange={handleSetSelections}\\n        />)}\\n    </div>\\n  )\\n}\\n\\nconst OptionGroup = ({ optionGroup, currentOptionGroupSelections, onChange }) => {\\n  const {\\n    options: currentOptionGroupSelectedOptions = []\\n  } = currentOptionGroupSelections\\n\\n  const isRadioGroup = optionGroup.min_selectable === 1 && optionGroup.max_selectable === 1\\n\\n  const createNewOptionGroupSelections = (e, changedOption) => {\\n    const newOptionGroup = { ...optionGroup }\\n    const newChangedOption = { ...changedOption }\\n\\n    if (e.target.checked) {\\n      newChangedOption.option_groups = getDefaultSelectedItemOptions(newChangedOption.option_groups)\\n    }\\n\\n    newOptionGroup.options = isRadioGroup\\n      ? [newChangedOption]\\n      : e.target.checked\\n        ? [...currentOptionGroupSelectedOptions, newChangedOption]\\n        : currentOptionGroupSelectedOptions.filter(opt => opt.id !== changedOption.id)\\n\\n    onChange(newOptionGroup)\\n  }\\n\\n  const createNewParentSelections = (parentOptionId, parentOptionSelections) => changedOptionGroup => {\\n    const newParentOptionSelections = parentOptionSelections.map(opt => {\\n      const newOpt = { ...opt }\\n      if (newOpt.id === parentOptionId) {\\n        newOpt.option_groups = newOpt.option_groups.map(og => {\\n          let newOptionGroup = { ...og }\\n          if (newOptionGroup.id === changedOptionGroup.id) {\\n            newOptionGroup = changedOptionGroup\\n          }\\n          return newOptionGroup\\n        })\\n      }\\n      return newOpt\\n    })\\n\\n    const newSelections = { ...currentOptionGroupSelections }\\n    newSelections.options = newParentOptionSelections\\n\\n    onChange(newSelections)\\n  }\\n\\n  return (\\n    <div className={'option-group'}>\\n      <div className='option-group-name'>{optionGroup.name}</div>\\n      <div className='options'>\\n        {optionGroup.options.map(option => {\\n          const isSelected = !!currentOptionGroupSelectedOptions.find(opt => option.id === opt.id)\\n          return (\\n            <>\\n              <div key={option.id} className='option'>\\n                <input type={isRadioGroup ? 'radio' : 'checkbox'}\\n                  name={optionGroup.id}\\n                  id={option.id}\\n                  value={option.id}\\n                  checked={isSelected}\\n                  onChange={e => createNewOptionGroupSelections(e, option)}\\n                />\\n                <label htmlFor={option.id}>{option.name}</label>\\n              </div>\\n\\n              <div>\\n                {isSelected && option.option_groups.map(nestedOptionGroup => {\\n                  const selOpts = currentOptionGroupSelectedOptions.find(sel => sel.id === option.id)\\n                  return (\\n                    <OptionGroup\\n                      key={nestedOptionGroup.id}\\n                      optionGroup={nestedOptionGroup}\\n                      currentOptionGroupSelections={selOpts ? pickSelectionsForOptionGroup(nestedOptionGroup, selOpts.option_groups) : []}\\n                      onChange={createNewParentSelections(option.id, currentOptionGroupSelectedOptions)}\\n                    />)\\n                })}\\n              </div>\\n            </>\\n          )\\n        })}\\n      </div>\\n    </div>\\n  )\\n}\\n\"))), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, \"Next, we have our handler for updating the state of the current selections, which will get passed down to our child components.\", mdx(\"p\", null, \"It's going to take in newOptionGroupSelections, which will represent the selections of the option group that has had a change made to its selections.\"), mdx(\"p\", null, \"!!NEXT!!\"), mdx(\"p\", null, \"Then we're going to create a new array from the currentSelections with the changed optionGroup replacing the matching one from the currentSelections.\"), mdx(\"p\", null, \"!!NEXT!!\"), mdx(\"p\", null, \"Finally, we'll update the state to replace the new selections.\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"4\": true,\n    \"className\": \"language-jsx\",\n    \"metastring\": \"4 27:39 file=./examples/App.js\",\n    \"27:39\": true,\n    \"file\": \"./examples/App.js\"\n  }), \"export const App = ({ menuItems }) => {\\n  return (\\n    <div className='App'>\\n      <div className='menu'>\\n        {menuItems.map(item => <MenuItem\\n          key={item.id}\\n          item={item} />)}\\n      </div>\\n    </div>\\n  )\\n}\\n\\nconst MenuItem = ({ item }) => {\\n  const [currentSelections, setCurrentSelections] = useState(getDefaultSelectedItemOptions(item.option_groups))\\n\\n  const handleSetSelections = newOptionGroupSelections => {\\n    const newSelections = currentSelections.map(opt => {\\n      if (opt.id === newOptionGroupSelections.id) {\\n        return newOptionGroupSelections\\n      }\\n      return opt\\n    })\\n\\n    setCurrentSelections(newSelections)\\n  }\\n\\n  return (\\n    <div>\\n      <span className='item-name'>{item.name}</span>\\n      {item.option_groups.map(optionGroup =>\\n        <OptionGroup\\n          key={optionGroup.id}\\n          optionGroup={optionGroup}\\n          currentOptionGroupSelections={pickSelectionsForOptionGroup(optionGroup, currentSelections)}\\n          onChange={handleSetSelections}\\n        />)}\\n    </div>\\n  )\\n}\\n\\nconst OptionGroup = ({ optionGroup, currentOptionGroupSelections, onChange }) => {\\n  const {\\n    options: currentOptionGroupSelectedOptions = []\\n  } = currentOptionGroupSelections\\n\\n  const isRadioGroup = optionGroup.min_selectable === 1 && optionGroup.max_selectable === 1\\n\\n  const createNewOptionGroupSelections = (e, changedOption) => {\\n    const newOptionGroup = { ...optionGroup }\\n    const newChangedOption = { ...changedOption }\\n\\n    if (e.target.checked) {\\n      newChangedOption.option_groups = getDefaultSelectedItemOptions(newChangedOption.option_groups)\\n    }\\n\\n    newOptionGroup.options = isRadioGroup\\n      ? [newChangedOption]\\n      : e.target.checked\\n        ? [...currentOptionGroupSelectedOptions, newChangedOption]\\n        : currentOptionGroupSelectedOptions.filter(opt => opt.id !== changedOption.id)\\n\\n    onChange(newOptionGroup)\\n  }\\n\\n  const createNewParentSelections = (parentOptionId, parentOptionSelections) => changedOptionGroup => {\\n    const newParentOptionSelections = parentOptionSelections.map(opt => {\\n      const newOpt = { ...opt }\\n      if (newOpt.id === parentOptionId) {\\n        newOpt.option_groups = newOpt.option_groups.map(og => {\\n          let newOptionGroup = { ...og }\\n          if (newOptionGroup.id === changedOptionGroup.id) {\\n            newOptionGroup = changedOptionGroup\\n          }\\n          return newOptionGroup\\n        })\\n      }\\n      return newOpt\\n    })\\n\\n    const newSelections = { ...currentOptionGroupSelections }\\n    newSelections.options = newParentOptionSelections\\n\\n    onChange(newSelections)\\n  }\\n\\n  return (\\n    <div className={'option-group'}>\\n      <div className='option-group-name'>{optionGroup.name}</div>\\n      <div className='options'>\\n        {optionGroup.options.map(option => {\\n          const isSelected = !!currentOptionGroupSelectedOptions.find(opt => option.id === opt.id)\\n          return (\\n            <>\\n              <div key={option.id} className='option'>\\n                <input type={isRadioGroup ? 'radio' : 'checkbox'}\\n                  name={optionGroup.id}\\n                  id={option.id}\\n                  value={option.id}\\n                  checked={isSelected}\\n                  onChange={e => createNewOptionGroupSelections(e, option)}\\n                />\\n                <label htmlFor={option.id}>{option.name}</label>\\n              </div>\\n\\n              <div>\\n                {isSelected && option.option_groups.map(nestedOptionGroup => {\\n                  const selOpts = currentOptionGroupSelectedOptions.find(sel => sel.id === option.id)\\n                  return (\\n                    <OptionGroup\\n                      key={nestedOptionGroup.id}\\n                      optionGroup={nestedOptionGroup}\\n                      currentOptionGroupSelections={selOpts ? pickSelectionsForOptionGroup(nestedOptionGroup, selOpts.option_groups) : []}\\n                      onChange={createNewParentSelections(option.id, currentOptionGroupSelectedOptions)}\\n                    />)\\n                })}\\n              </div>\\n            </>\\n          )\\n        })}\\n      </div>\\n    </div>\\n  )\\n}\\n\"))), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"p\", null, \"Now let's look at the render.\"), mdx(\"p\", null, \"We're displaying the item name, then we're going to map over the item's top-level option groups and display an OptionGroup component for each. We're passing in the individual optionGroup, which is the full data for the optionGroup from the menuItem. That represents all of the data that will be displayed for the optionGroup.\"), mdx(\"p\", null, \"We're also passing in the currentOptionGroupSelections, which is the state of what is selected for the option group. We're using a helper function here to get the currentSelections for just the option group in question.\"), mdx(\"p\", null, \"And then we're passing in our handler as an onChange prop.\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"1\": true,\n    \"className\": \"language-jsx\",\n    \"metastring\": \"1 41:124 file=./examples/App.js\",\n    \"41:124\": true,\n    \"file\": \"./examples/App.js\"\n  }), \"export const App = ({ menuItems }) => {\\n  return (\\n    <div className='App'>\\n      <div className='menu'>\\n        {menuItems.map(item => <MenuItem\\n          key={item.id}\\n          item={item} />)}\\n      </div>\\n    </div>\\n  )\\n}\\n\\nconst MenuItem = ({ item }) => {\\n  const [currentSelections, setCurrentSelections] = useState(getDefaultSelectedItemOptions(item.option_groups))\\n\\n  const handleSetSelections = newOptionGroupSelections => {\\n    const newSelections = currentSelections.map(opt => {\\n      if (opt.id === newOptionGroupSelections.id) {\\n        return newOptionGroupSelections\\n      }\\n      return opt\\n    })\\n\\n    setCurrentSelections(newSelections)\\n  }\\n\\n  return (\\n    <div>\\n      <span className='item-name'>{item.name}</span>\\n      {item.option_groups.map(optionGroup =>\\n        <OptionGroup\\n          key={optionGroup.id}\\n          optionGroup={optionGroup}\\n          currentOptionGroupSelections={pickSelectionsForOptionGroup(optionGroup, currentSelections)}\\n          onChange={handleSetSelections}\\n        />)}\\n    </div>\\n  )\\n}\\n\\nconst OptionGroup = ({ optionGroup, currentOptionGroupSelections, onChange }) => {\\n  const {\\n    options: currentOptionGroupSelectedOptions = []\\n  } = currentOptionGroupSelections\\n\\n  const isRadioGroup = optionGroup.min_selectable === 1 && optionGroup.max_selectable === 1\\n\\n  const createNewOptionGroupSelections = (e, changedOption) => {\\n    const newOptionGroup = { ...optionGroup }\\n    const newChangedOption = { ...changedOption }\\n\\n    if (e.target.checked) {\\n      newChangedOption.option_groups = getDefaultSelectedItemOptions(newChangedOption.option_groups)\\n    }\\n\\n    newOptionGroup.options = isRadioGroup\\n      ? [newChangedOption]\\n      : e.target.checked\\n        ? [...currentOptionGroupSelectedOptions, newChangedOption]\\n        : currentOptionGroupSelectedOptions.filter(opt => opt.id !== changedOption.id)\\n\\n    onChange(newOptionGroup)\\n  }\\n\\n  const createNewParentSelections = (parentOptionId, parentOptionSelections) => changedOptionGroup => {\\n    const newParentOptionSelections = parentOptionSelections.map(opt => {\\n      const newOpt = { ...opt }\\n      if (newOpt.id === parentOptionId) {\\n        newOpt.option_groups = newOpt.option_groups.map(og => {\\n          let newOptionGroup = { ...og }\\n          if (newOptionGroup.id === changedOptionGroup.id) {\\n            newOptionGroup = changedOptionGroup\\n          }\\n          return newOptionGroup\\n        })\\n      }\\n      return newOpt\\n    })\\n\\n    const newSelections = { ...currentOptionGroupSelections }\\n    newSelections.options = newParentOptionSelections\\n\\n    onChange(newSelections)\\n  }\\n\\n  return (\\n    <div className={'option-group'}>\\n      <div className='option-group-name'>{optionGroup.name}</div>\\n      <div className='options'>\\n        {optionGroup.options.map(option => {\\n          const isSelected = !!currentOptionGroupSelectedOptions.find(opt => option.id === opt.id)\\n          return (\\n            <>\\n              <div key={option.id} className='option'>\\n                <input type={isRadioGroup ? 'radio' : 'checkbox'}\\n                  name={optionGroup.id}\\n                  id={option.id}\\n                  value={option.id}\\n                  checked={isSelected}\\n                  onChange={e => createNewOptionGroupSelections(e, option)}\\n                />\\n                <label htmlFor={option.id}>{option.name}</label>\\n              </div>\\n\\n              <div>\\n                {isSelected && option.option_groups.map(nestedOptionGroup => {\\n                  const selOpts = currentOptionGroupSelectedOptions.find(sel => sel.id === option.id)\\n                  return (\\n                    <OptionGroup\\n                      key={nestedOptionGroup.id}\\n                      optionGroup={nestedOptionGroup}\\n                      currentOptionGroupSelections={selOpts ? pickSelectionsForOptionGroup(nestedOptionGroup, selOpts.option_groups) : []}\\n                      onChange={createNewParentSelections(option.id, currentOptionGroupSelectedOptions)}\\n                    />)\\n                })}\\n              </div>\\n            </>\\n          )\\n        })}\\n      </div>\\n    </div>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"2\": true,\n    \"className\": \"language-jsx\",\n    \"metastring\": \"2 87:123 file=./examples/App.js\",\n    \"87:123\": true,\n    \"file\": \"./examples/App.js\"\n  }), \"export const App = ({ menuItems }) => {\\n  return (\\n    <div className='App'>\\n      <div className='menu'>\\n        {menuItems.map(item => <MenuItem\\n          key={item.id}\\n          item={item} />)}\\n      </div>\\n    </div>\\n  )\\n}\\n\\nconst MenuItem = ({ item }) => {\\n  const [currentSelections, setCurrentSelections] = useState(getDefaultSelectedItemOptions(item.option_groups))\\n\\n  const handleSetSelections = newOptionGroupSelections => {\\n    const newSelections = currentSelections.map(opt => {\\n      if (opt.id === newOptionGroupSelections.id) {\\n        return newOptionGroupSelections\\n      }\\n      return opt\\n    })\\n\\n    setCurrentSelections(newSelections)\\n  }\\n\\n  return (\\n    <div>\\n      <span className='item-name'>{item.name}</span>\\n      {item.option_groups.map(optionGroup =>\\n        <OptionGroup\\n          key={optionGroup.id}\\n          optionGroup={optionGroup}\\n          currentOptionGroupSelections={pickSelectionsForOptionGroup(optionGroup, currentSelections)}\\n          onChange={handleSetSelections}\\n        />)}\\n    </div>\\n  )\\n}\\n\\nconst OptionGroup = ({ optionGroup, currentOptionGroupSelections, onChange }) => {\\n  const {\\n    options: currentOptionGroupSelectedOptions = []\\n  } = currentOptionGroupSelections\\n\\n  const isRadioGroup = optionGroup.min_selectable === 1 && optionGroup.max_selectable === 1\\n\\n  const createNewOptionGroupSelections = (e, changedOption) => {\\n    const newOptionGroup = { ...optionGroup }\\n    const newChangedOption = { ...changedOption }\\n\\n    if (e.target.checked) {\\n      newChangedOption.option_groups = getDefaultSelectedItemOptions(newChangedOption.option_groups)\\n    }\\n\\n    newOptionGroup.options = isRadioGroup\\n      ? [newChangedOption]\\n      : e.target.checked\\n        ? [...currentOptionGroupSelectedOptions, newChangedOption]\\n        : currentOptionGroupSelectedOptions.filter(opt => opt.id !== changedOption.id)\\n\\n    onChange(newOptionGroup)\\n  }\\n\\n  const createNewParentSelections = (parentOptionId, parentOptionSelections) => changedOptionGroup => {\\n    const newParentOptionSelections = parentOptionSelections.map(opt => {\\n      const newOpt = { ...opt }\\n      if (newOpt.id === parentOptionId) {\\n        newOpt.option_groups = newOpt.option_groups.map(og => {\\n          let newOptionGroup = { ...og }\\n          if (newOptionGroup.id === changedOptionGroup.id) {\\n            newOptionGroup = changedOptionGroup\\n          }\\n          return newOptionGroup\\n        })\\n      }\\n      return newOpt\\n    })\\n\\n    const newSelections = { ...currentOptionGroupSelections }\\n    newSelections.options = newParentOptionSelections\\n\\n    onChange(newSelections)\\n  }\\n\\n  return (\\n    <div className={'option-group'}>\\n      <div className='option-group-name'>{optionGroup.name}</div>\\n      <div className='options'>\\n        {optionGroup.options.map(option => {\\n          const isSelected = !!currentOptionGroupSelectedOptions.find(opt => option.id === opt.id)\\n          return (\\n            <>\\n              <div key={option.id} className='option'>\\n                <input type={isRadioGroup ? 'radio' : 'checkbox'}\\n                  name={optionGroup.id}\\n                  id={option.id}\\n                  value={option.id}\\n                  checked={isSelected}\\n                  onChange={e => createNewOptionGroupSelections(e, option)}\\n                />\\n                <label htmlFor={option.id}>{option.name}</label>\\n              </div>\\n\\n              <div>\\n                {isSelected && option.option_groups.map(nestedOptionGroup => {\\n                  const selOpts = currentOptionGroupSelectedOptions.find(sel => sel.id === option.id)\\n                  return (\\n                    <OptionGroup\\n                      key={nestedOptionGroup.id}\\n                      optionGroup={nestedOptionGroup}\\n                      currentOptionGroupSelections={selOpts ? pickSelectionsForOptionGroup(nestedOptionGroup, selOpts.option_groups) : []}\\n                      onChange={createNewParentSelections(option.id, currentOptionGroupSelectedOptions)}\\n                    />)\\n                })}\\n              </div>\\n            </>\\n          )\\n        })}\\n      </div>\\n    </div>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"3\": true,\n    \"90\": true,\n    \"className\": \"language-jsx\",\n    \"metastring\": \"3 90 file=./examples/App.js\",\n    \"file\": \"./examples/App.js\"\n  }), \"export const App = ({ menuItems }) => {\\n  return (\\n    <div className='App'>\\n      <div className='menu'>\\n        {menuItems.map(item => <MenuItem\\n          key={item.id}\\n          item={item} />)}\\n      </div>\\n    </div>\\n  )\\n}\\n\\nconst MenuItem = ({ item }) => {\\n  const [currentSelections, setCurrentSelections] = useState(getDefaultSelectedItemOptions(item.option_groups))\\n\\n  const handleSetSelections = newOptionGroupSelections => {\\n    const newSelections = currentSelections.map(opt => {\\n      if (opt.id === newOptionGroupSelections.id) {\\n        return newOptionGroupSelections\\n      }\\n      return opt\\n    })\\n\\n    setCurrentSelections(newSelections)\\n  }\\n\\n  return (\\n    <div>\\n      <span className='item-name'>{item.name}</span>\\n      {item.option_groups.map(optionGroup =>\\n        <OptionGroup\\n          key={optionGroup.id}\\n          optionGroup={optionGroup}\\n          currentOptionGroupSelections={pickSelectionsForOptionGroup(optionGroup, currentSelections)}\\n          onChange={handleSetSelections}\\n        />)}\\n    </div>\\n  )\\n}\\n\\nconst OptionGroup = ({ optionGroup, currentOptionGroupSelections, onChange }) => {\\n  const {\\n    options: currentOptionGroupSelectedOptions = []\\n  } = currentOptionGroupSelections\\n\\n  const isRadioGroup = optionGroup.min_selectable === 1 && optionGroup.max_selectable === 1\\n\\n  const createNewOptionGroupSelections = (e, changedOption) => {\\n    const newOptionGroup = { ...optionGroup }\\n    const newChangedOption = { ...changedOption }\\n\\n    if (e.target.checked) {\\n      newChangedOption.option_groups = getDefaultSelectedItemOptions(newChangedOption.option_groups)\\n    }\\n\\n    newOptionGroup.options = isRadioGroup\\n      ? [newChangedOption]\\n      : e.target.checked\\n        ? [...currentOptionGroupSelectedOptions, newChangedOption]\\n        : currentOptionGroupSelectedOptions.filter(opt => opt.id !== changedOption.id)\\n\\n    onChange(newOptionGroup)\\n  }\\n\\n  const createNewParentSelections = (parentOptionId, parentOptionSelections) => changedOptionGroup => {\\n    const newParentOptionSelections = parentOptionSelections.map(opt => {\\n      const newOpt = { ...opt }\\n      if (newOpt.id === parentOptionId) {\\n        newOpt.option_groups = newOpt.option_groups.map(og => {\\n          let newOptionGroup = { ...og }\\n          if (newOptionGroup.id === changedOptionGroup.id) {\\n            newOptionGroup = changedOptionGroup\\n          }\\n          return newOptionGroup\\n        })\\n      }\\n      return newOpt\\n    })\\n\\n    const newSelections = { ...currentOptionGroupSelections }\\n    newSelections.options = newParentOptionSelections\\n\\n    onChange(newSelections)\\n  }\\n\\n  return (\\n    <div className={'option-group'}>\\n      <div className='option-group-name'>{optionGroup.name}</div>\\n      <div className='options'>\\n        {optionGroup.options.map(option => {\\n          const isSelected = !!currentOptionGroupSelectedOptions.find(opt => option.id === opt.id)\\n          return (\\n            <>\\n              <div key={option.id} className='option'>\\n                <input type={isRadioGroup ? 'radio' : 'checkbox'}\\n                  name={optionGroup.id}\\n                  id={option.id}\\n                  value={option.id}\\n                  checked={isSelected}\\n                  onChange={e => createNewOptionGroupSelections(e, option)}\\n                />\\n                <label htmlFor={option.id}>{option.name}</label>\\n              </div>\\n\\n              <div>\\n                {isSelected && option.option_groups.map(nestedOptionGroup => {\\n                  const selOpts = currentOptionGroupSelectedOptions.find(sel => sel.id === option.id)\\n                  return (\\n                    <OptionGroup\\n                      key={nestedOptionGroup.id}\\n                      optionGroup={nestedOptionGroup}\\n                      currentOptionGroupSelections={selOpts ? pickSelectionsForOptionGroup(nestedOptionGroup, selOpts.option_groups) : []}\\n                      onChange={createNewParentSelections(option.id, currentOptionGroupSelectedOptions)}\\n                    />)\\n                })}\\n              </div>\\n            </>\\n          )\\n        })}\\n      </div>\\n    </div>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"4\": true,\n    \"className\": \"language-jsx\",\n    \"metastring\": \"4 95:101 file=./examples/App.js\",\n    \"95:101\": true,\n    \"file\": \"./examples/App.js\"\n  }), \"export const App = ({ menuItems }) => {\\n  return (\\n    <div className='App'>\\n      <div className='menu'>\\n        {menuItems.map(item => <MenuItem\\n          key={item.id}\\n          item={item} />)}\\n      </div>\\n    </div>\\n  )\\n}\\n\\nconst MenuItem = ({ item }) => {\\n  const [currentSelections, setCurrentSelections] = useState(getDefaultSelectedItemOptions(item.option_groups))\\n\\n  const handleSetSelections = newOptionGroupSelections => {\\n    const newSelections = currentSelections.map(opt => {\\n      if (opt.id === newOptionGroupSelections.id) {\\n        return newOptionGroupSelections\\n      }\\n      return opt\\n    })\\n\\n    setCurrentSelections(newSelections)\\n  }\\n\\n  return (\\n    <div>\\n      <span className='item-name'>{item.name}</span>\\n      {item.option_groups.map(optionGroup =>\\n        <OptionGroup\\n          key={optionGroup.id}\\n          optionGroup={optionGroup}\\n          currentOptionGroupSelections={pickSelectionsForOptionGroup(optionGroup, currentSelections)}\\n          onChange={handleSetSelections}\\n        />)}\\n    </div>\\n  )\\n}\\n\\nconst OptionGroup = ({ optionGroup, currentOptionGroupSelections, onChange }) => {\\n  const {\\n    options: currentOptionGroupSelectedOptions = []\\n  } = currentOptionGroupSelections\\n\\n  const isRadioGroup = optionGroup.min_selectable === 1 && optionGroup.max_selectable === 1\\n\\n  const createNewOptionGroupSelections = (e, changedOption) => {\\n    const newOptionGroup = { ...optionGroup }\\n    const newChangedOption = { ...changedOption }\\n\\n    if (e.target.checked) {\\n      newChangedOption.option_groups = getDefaultSelectedItemOptions(newChangedOption.option_groups)\\n    }\\n\\n    newOptionGroup.options = isRadioGroup\\n      ? [newChangedOption]\\n      : e.target.checked\\n        ? [...currentOptionGroupSelectedOptions, newChangedOption]\\n        : currentOptionGroupSelectedOptions.filter(opt => opt.id !== changedOption.id)\\n\\n    onChange(newOptionGroup)\\n  }\\n\\n  const createNewParentSelections = (parentOptionId, parentOptionSelections) => changedOptionGroup => {\\n    const newParentOptionSelections = parentOptionSelections.map(opt => {\\n      const newOpt = { ...opt }\\n      if (newOpt.id === parentOptionId) {\\n        newOpt.option_groups = newOpt.option_groups.map(og => {\\n          let newOptionGroup = { ...og }\\n          if (newOptionGroup.id === changedOptionGroup.id) {\\n            newOptionGroup = changedOptionGroup\\n          }\\n          return newOptionGroup\\n        })\\n      }\\n      return newOpt\\n    })\\n\\n    const newSelections = { ...currentOptionGroupSelections }\\n    newSelections.options = newParentOptionSelections\\n\\n    onChange(newSelections)\\n  }\\n\\n  return (\\n    <div className={'option-group'}>\\n      <div className='option-group-name'>{optionGroup.name}</div>\\n      <div className='options'>\\n        {optionGroup.options.map(option => {\\n          const isSelected = !!currentOptionGroupSelectedOptions.find(opt => option.id === opt.id)\\n          return (\\n            <>\\n              <div key={option.id} className='option'>\\n                <input type={isRadioGroup ? 'radio' : 'checkbox'}\\n                  name={optionGroup.id}\\n                  id={option.id}\\n                  value={option.id}\\n                  checked={isSelected}\\n                  onChange={e => createNewOptionGroupSelections(e, option)}\\n                />\\n                <label htmlFor={option.id}>{option.name}</label>\\n              </div>\\n\\n              <div>\\n                {isSelected && option.option_groups.map(nestedOptionGroup => {\\n                  const selOpts = currentOptionGroupSelectedOptions.find(sel => sel.id === option.id)\\n                  return (\\n                    <OptionGroup\\n                      key={nestedOptionGroup.id}\\n                      optionGroup={nestedOptionGroup}\\n                      currentOptionGroupSelections={selOpts ? pickSelectionsForOptionGroup(nestedOptionGroup, selOpts.option_groups) : []}\\n                      onChange={createNewParentSelections(option.id, currentOptionGroupSelectedOptions)}\\n                    />)\\n                })}\\n              </div>\\n            </>\\n          )\\n        })}\\n      </div>\\n    </div>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"5\": true,\n    \"100\": true,\n    \"className\": \"language-jsx\",\n    \"metastring\": \"5 100 file=./examples/App.js\",\n    \"file\": \"./examples/App.js\"\n  }), \"export const App = ({ menuItems }) => {\\n  return (\\n    <div className='App'>\\n      <div className='menu'>\\n        {menuItems.map(item => <MenuItem\\n          key={item.id}\\n          item={item} />)}\\n      </div>\\n    </div>\\n  )\\n}\\n\\nconst MenuItem = ({ item }) => {\\n  const [currentSelections, setCurrentSelections] = useState(getDefaultSelectedItemOptions(item.option_groups))\\n\\n  const handleSetSelections = newOptionGroupSelections => {\\n    const newSelections = currentSelections.map(opt => {\\n      if (opt.id === newOptionGroupSelections.id) {\\n        return newOptionGroupSelections\\n      }\\n      return opt\\n    })\\n\\n    setCurrentSelections(newSelections)\\n  }\\n\\n  return (\\n    <div>\\n      <span className='item-name'>{item.name}</span>\\n      {item.option_groups.map(optionGroup =>\\n        <OptionGroup\\n          key={optionGroup.id}\\n          optionGroup={optionGroup}\\n          currentOptionGroupSelections={pickSelectionsForOptionGroup(optionGroup, currentSelections)}\\n          onChange={handleSetSelections}\\n        />)}\\n    </div>\\n  )\\n}\\n\\nconst OptionGroup = ({ optionGroup, currentOptionGroupSelections, onChange }) => {\\n  const {\\n    options: currentOptionGroupSelectedOptions = []\\n  } = currentOptionGroupSelections\\n\\n  const isRadioGroup = optionGroup.min_selectable === 1 && optionGroup.max_selectable === 1\\n\\n  const createNewOptionGroupSelections = (e, changedOption) => {\\n    const newOptionGroup = { ...optionGroup }\\n    const newChangedOption = { ...changedOption }\\n\\n    if (e.target.checked) {\\n      newChangedOption.option_groups = getDefaultSelectedItemOptions(newChangedOption.option_groups)\\n    }\\n\\n    newOptionGroup.options = isRadioGroup\\n      ? [newChangedOption]\\n      : e.target.checked\\n        ? [...currentOptionGroupSelectedOptions, newChangedOption]\\n        : currentOptionGroupSelectedOptions.filter(opt => opt.id !== changedOption.id)\\n\\n    onChange(newOptionGroup)\\n  }\\n\\n  const createNewParentSelections = (parentOptionId, parentOptionSelections) => changedOptionGroup => {\\n    const newParentOptionSelections = parentOptionSelections.map(opt => {\\n      const newOpt = { ...opt }\\n      if (newOpt.id === parentOptionId) {\\n        newOpt.option_groups = newOpt.option_groups.map(og => {\\n          let newOptionGroup = { ...og }\\n          if (newOptionGroup.id === changedOptionGroup.id) {\\n            newOptionGroup = changedOptionGroup\\n          }\\n          return newOptionGroup\\n        })\\n      }\\n      return newOpt\\n    })\\n\\n    const newSelections = { ...currentOptionGroupSelections }\\n    newSelections.options = newParentOptionSelections\\n\\n    onChange(newSelections)\\n  }\\n\\n  return (\\n    <div className={'option-group'}>\\n      <div className='option-group-name'>{optionGroup.name}</div>\\n      <div className='options'>\\n        {optionGroup.options.map(option => {\\n          const isSelected = !!currentOptionGroupSelectedOptions.find(opt => option.id === opt.id)\\n          return (\\n            <>\\n              <div key={option.id} className='option'>\\n                <input type={isRadioGroup ? 'radio' : 'checkbox'}\\n                  name={optionGroup.id}\\n                  id={option.id}\\n                  value={option.id}\\n                  checked={isSelected}\\n                  onChange={e => createNewOptionGroupSelections(e, option)}\\n                />\\n                <label htmlFor={option.id}>{option.name}</label>\\n              </div>\\n\\n              <div>\\n                {isSelected && option.option_groups.map(nestedOptionGroup => {\\n                  const selOpts = currentOptionGroupSelectedOptions.find(sel => sel.id === option.id)\\n                  return (\\n                    <OptionGroup\\n                      key={nestedOptionGroup.id}\\n                      optionGroup={nestedOptionGroup}\\n                      currentOptionGroupSelections={selOpts ? pickSelectionsForOptionGroup(nestedOptionGroup, selOpts.option_groups) : []}\\n                      onChange={createNewParentSelections(option.id, currentOptionGroupSelectedOptions)}\\n                    />)\\n                })}\\n              </div>\\n            </>\\n          )\\n        })}\\n      </div>\\n    </div>\\n  )\\n}\\n\"))), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, \"Next let's look at the part that is doing the heavy lifting -- the OptionGroup component.\", mdx(\"p\", null, \"!!NEXT!!\"), mdx(\"p\", null, \"We're going to skip down to the render method first\"), mdx(\"p\", null, \"!!NEXT!!\"), mdx(\"p\", null, \"Each option group has an array of options.\"), mdx(\"p\", null, \"!!NEXT!!\"), mdx(\"p\", null, \"For each option we're going to render a selectable radio button or checkbox\"), mdx(\"p\", null, \"!!NEXT!!\"), mdx(\"p\", null, \"And for the input's onChange prop, we're going to pass in an anonymous function that calls a function named createNewOptionGroupSelections\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"1\": true,\n    \"className\": \"language-jsx\",\n    \"metastring\": \"1 48:64 file=./examples/App.js\",\n    \"48:64\": true,\n    \"file\": \"./examples/App.js\"\n  }), \"export const App = ({ menuItems }) => {\\n  return (\\n    <div className='App'>\\n      <div className='menu'>\\n        {menuItems.map(item => <MenuItem\\n          key={item.id}\\n          item={item} />)}\\n      </div>\\n    </div>\\n  )\\n}\\n\\nconst MenuItem = ({ item }) => {\\n  const [currentSelections, setCurrentSelections] = useState(getDefaultSelectedItemOptions(item.option_groups))\\n\\n  const handleSetSelections = newOptionGroupSelections => {\\n    const newSelections = currentSelections.map(opt => {\\n      if (opt.id === newOptionGroupSelections.id) {\\n        return newOptionGroupSelections\\n      }\\n      return opt\\n    })\\n\\n    setCurrentSelections(newSelections)\\n  }\\n\\n  return (\\n    <div>\\n      <span className='item-name'>{item.name}</span>\\n      {item.option_groups.map(optionGroup =>\\n        <OptionGroup\\n          key={optionGroup.id}\\n          optionGroup={optionGroup}\\n          currentOptionGroupSelections={pickSelectionsForOptionGroup(optionGroup, currentSelections)}\\n          onChange={handleSetSelections}\\n        />)}\\n    </div>\\n  )\\n}\\n\\nconst OptionGroup = ({ optionGroup, currentOptionGroupSelections, onChange }) => {\\n  const {\\n    options: currentOptionGroupSelectedOptions = []\\n  } = currentOptionGroupSelections\\n\\n  const isRadioGroup = optionGroup.min_selectable === 1 && optionGroup.max_selectable === 1\\n\\n  const createNewOptionGroupSelections = (e, changedOption) => {\\n    const newOptionGroup = { ...optionGroup }\\n    const newChangedOption = { ...changedOption }\\n\\n    if (e.target.checked) {\\n      newChangedOption.option_groups = getDefaultSelectedItemOptions(newChangedOption.option_groups)\\n    }\\n\\n    newOptionGroup.options = isRadioGroup\\n      ? [newChangedOption]\\n      : e.target.checked\\n        ? [...currentOptionGroupSelectedOptions, newChangedOption]\\n        : currentOptionGroupSelectedOptions.filter(opt => opt.id !== changedOption.id)\\n\\n    onChange(newOptionGroup)\\n  }\\n\\n  const createNewParentSelections = (parentOptionId, parentOptionSelections) => changedOptionGroup => {\\n    const newParentOptionSelections = parentOptionSelections.map(opt => {\\n      const newOpt = { ...opt }\\n      if (newOpt.id === parentOptionId) {\\n        newOpt.option_groups = newOpt.option_groups.map(og => {\\n          let newOptionGroup = { ...og }\\n          if (newOptionGroup.id === changedOptionGroup.id) {\\n            newOptionGroup = changedOptionGroup\\n          }\\n          return newOptionGroup\\n        })\\n      }\\n      return newOpt\\n    })\\n\\n    const newSelections = { ...currentOptionGroupSelections }\\n    newSelections.options = newParentOptionSelections\\n\\n    onChange(newSelections)\\n  }\\n\\n  return (\\n    <div className={'option-group'}>\\n      <div className='option-group-name'>{optionGroup.name}</div>\\n      <div className='options'>\\n        {optionGroup.options.map(option => {\\n          const isSelected = !!currentOptionGroupSelectedOptions.find(opt => option.id === opt.id)\\n          return (\\n            <>\\n              <div key={option.id} className='option'>\\n                <input type={isRadioGroup ? 'radio' : 'checkbox'}\\n                  name={optionGroup.id}\\n                  id={option.id}\\n                  value={option.id}\\n                  checked={isSelected}\\n                  onChange={e => createNewOptionGroupSelections(e, option)}\\n                />\\n                <label htmlFor={option.id}>{option.name}</label>\\n              </div>\\n\\n              <div>\\n                {isSelected && option.option_groups.map(nestedOptionGroup => {\\n                  const selOpts = currentOptionGroupSelectedOptions.find(sel => sel.id === option.id)\\n                  return (\\n                    <OptionGroup\\n                      key={nestedOptionGroup.id}\\n                      optionGroup={nestedOptionGroup}\\n                      currentOptionGroupSelections={selOpts ? pickSelectionsForOptionGroup(nestedOptionGroup, selOpts.option_groups) : []}\\n                      onChange={createNewParentSelections(option.id, currentOptionGroupSelectedOptions)}\\n                    />)\\n                })}\\n              </div>\\n            </>\\n          )\\n        })}\\n      </div>\\n    </div>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"2\": true,\n    \"className\": \"language-jsx\",\n    \"metastring\": \"2 49:51 file=./examples/App.js\",\n    \"49:51\": true,\n    \"file\": \"./examples/App.js\"\n  }), \"export const App = ({ menuItems }) => {\\n  return (\\n    <div className='App'>\\n      <div className='menu'>\\n        {menuItems.map(item => <MenuItem\\n          key={item.id}\\n          item={item} />)}\\n      </div>\\n    </div>\\n  )\\n}\\n\\nconst MenuItem = ({ item }) => {\\n  const [currentSelections, setCurrentSelections] = useState(getDefaultSelectedItemOptions(item.option_groups))\\n\\n  const handleSetSelections = newOptionGroupSelections => {\\n    const newSelections = currentSelections.map(opt => {\\n      if (opt.id === newOptionGroupSelections.id) {\\n        return newOptionGroupSelections\\n      }\\n      return opt\\n    })\\n\\n    setCurrentSelections(newSelections)\\n  }\\n\\n  return (\\n    <div>\\n      <span className='item-name'>{item.name}</span>\\n      {item.option_groups.map(optionGroup =>\\n        <OptionGroup\\n          key={optionGroup.id}\\n          optionGroup={optionGroup}\\n          currentOptionGroupSelections={pickSelectionsForOptionGroup(optionGroup, currentSelections)}\\n          onChange={handleSetSelections}\\n        />)}\\n    </div>\\n  )\\n}\\n\\nconst OptionGroup = ({ optionGroup, currentOptionGroupSelections, onChange }) => {\\n  const {\\n    options: currentOptionGroupSelectedOptions = []\\n  } = currentOptionGroupSelections\\n\\n  const isRadioGroup = optionGroup.min_selectable === 1 && optionGroup.max_selectable === 1\\n\\n  const createNewOptionGroupSelections = (e, changedOption) => {\\n    const newOptionGroup = { ...optionGroup }\\n    const newChangedOption = { ...changedOption }\\n\\n    if (e.target.checked) {\\n      newChangedOption.option_groups = getDefaultSelectedItemOptions(newChangedOption.option_groups)\\n    }\\n\\n    newOptionGroup.options = isRadioGroup\\n      ? [newChangedOption]\\n      : e.target.checked\\n        ? [...currentOptionGroupSelectedOptions, newChangedOption]\\n        : currentOptionGroupSelectedOptions.filter(opt => opt.id !== changedOption.id)\\n\\n    onChange(newOptionGroup)\\n  }\\n\\n  const createNewParentSelections = (parentOptionId, parentOptionSelections) => changedOptionGroup => {\\n    const newParentOptionSelections = parentOptionSelections.map(opt => {\\n      const newOpt = { ...opt }\\n      if (newOpt.id === parentOptionId) {\\n        newOpt.option_groups = newOpt.option_groups.map(og => {\\n          let newOptionGroup = { ...og }\\n          if (newOptionGroup.id === changedOptionGroup.id) {\\n            newOptionGroup = changedOptionGroup\\n          }\\n          return newOptionGroup\\n        })\\n      }\\n      return newOpt\\n    })\\n\\n    const newSelections = { ...currentOptionGroupSelections }\\n    newSelections.options = newParentOptionSelections\\n\\n    onChange(newSelections)\\n  }\\n\\n  return (\\n    <div className={'option-group'}>\\n      <div className='option-group-name'>{optionGroup.name}</div>\\n      <div className='options'>\\n        {optionGroup.options.map(option => {\\n          const isSelected = !!currentOptionGroupSelectedOptions.find(opt => option.id === opt.id)\\n          return (\\n            <>\\n              <div key={option.id} className='option'>\\n                <input type={isRadioGroup ? 'radio' : 'checkbox'}\\n                  name={optionGroup.id}\\n                  id={option.id}\\n                  value={option.id}\\n                  checked={isSelected}\\n                  onChange={e => createNewOptionGroupSelections(e, option)}\\n                />\\n                <label htmlFor={option.id}>{option.name}</label>\\n              </div>\\n\\n              <div>\\n                {isSelected && option.option_groups.map(nestedOptionGroup => {\\n                  const selOpts = currentOptionGroupSelectedOptions.find(sel => sel.id === option.id)\\n                  return (\\n                    <OptionGroup\\n                      key={nestedOptionGroup.id}\\n                      optionGroup={nestedOptionGroup}\\n                      currentOptionGroupSelections={selOpts ? pickSelectionsForOptionGroup(nestedOptionGroup, selOpts.option_groups) : []}\\n                      onChange={createNewParentSelections(option.id, currentOptionGroupSelectedOptions)}\\n                    />)\\n                })}\\n              </div>\\n            </>\\n          )\\n        })}\\n      </div>\\n    </div>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"3\": true,\n    \"className\": \"language-jsx\",\n    \"metastring\": \"3 52:54 file=./examples/App.js\",\n    \"52:54\": true,\n    \"file\": \"./examples/App.js\"\n  }), \"export const App = ({ menuItems }) => {\\n  return (\\n    <div className='App'>\\n      <div className='menu'>\\n        {menuItems.map(item => <MenuItem\\n          key={item.id}\\n          item={item} />)}\\n      </div>\\n    </div>\\n  )\\n}\\n\\nconst MenuItem = ({ item }) => {\\n  const [currentSelections, setCurrentSelections] = useState(getDefaultSelectedItemOptions(item.option_groups))\\n\\n  const handleSetSelections = newOptionGroupSelections => {\\n    const newSelections = currentSelections.map(opt => {\\n      if (opt.id === newOptionGroupSelections.id) {\\n        return newOptionGroupSelections\\n      }\\n      return opt\\n    })\\n\\n    setCurrentSelections(newSelections)\\n  }\\n\\n  return (\\n    <div>\\n      <span className='item-name'>{item.name}</span>\\n      {item.option_groups.map(optionGroup =>\\n        <OptionGroup\\n          key={optionGroup.id}\\n          optionGroup={optionGroup}\\n          currentOptionGroupSelections={pickSelectionsForOptionGroup(optionGroup, currentSelections)}\\n          onChange={handleSetSelections}\\n        />)}\\n    </div>\\n  )\\n}\\n\\nconst OptionGroup = ({ optionGroup, currentOptionGroupSelections, onChange }) => {\\n  const {\\n    options: currentOptionGroupSelectedOptions = []\\n  } = currentOptionGroupSelections\\n\\n  const isRadioGroup = optionGroup.min_selectable === 1 && optionGroup.max_selectable === 1\\n\\n  const createNewOptionGroupSelections = (e, changedOption) => {\\n    const newOptionGroup = { ...optionGroup }\\n    const newChangedOption = { ...changedOption }\\n\\n    if (e.target.checked) {\\n      newChangedOption.option_groups = getDefaultSelectedItemOptions(newChangedOption.option_groups)\\n    }\\n\\n    newOptionGroup.options = isRadioGroup\\n      ? [newChangedOption]\\n      : e.target.checked\\n        ? [...currentOptionGroupSelectedOptions, newChangedOption]\\n        : currentOptionGroupSelectedOptions.filter(opt => opt.id !== changedOption.id)\\n\\n    onChange(newOptionGroup)\\n  }\\n\\n  const createNewParentSelections = (parentOptionId, parentOptionSelections) => changedOptionGroup => {\\n    const newParentOptionSelections = parentOptionSelections.map(opt => {\\n      const newOpt = { ...opt }\\n      if (newOpt.id === parentOptionId) {\\n        newOpt.option_groups = newOpt.option_groups.map(og => {\\n          let newOptionGroup = { ...og }\\n          if (newOptionGroup.id === changedOptionGroup.id) {\\n            newOptionGroup = changedOptionGroup\\n          }\\n          return newOptionGroup\\n        })\\n      }\\n      return newOpt\\n    })\\n\\n    const newSelections = { ...currentOptionGroupSelections }\\n    newSelections.options = newParentOptionSelections\\n\\n    onChange(newSelections)\\n  }\\n\\n  return (\\n    <div className={'option-group'}>\\n      <div className='option-group-name'>{optionGroup.name}</div>\\n      <div className='options'>\\n        {optionGroup.options.map(option => {\\n          const isSelected = !!currentOptionGroupSelectedOptions.find(opt => option.id === opt.id)\\n          return (\\n            <>\\n              <div key={option.id} className='option'>\\n                <input type={isRadioGroup ? 'radio' : 'checkbox'}\\n                  name={optionGroup.id}\\n                  id={option.id}\\n                  value={option.id}\\n                  checked={isSelected}\\n                  onChange={e => createNewOptionGroupSelections(e, option)}\\n                />\\n                <label htmlFor={option.id}>{option.name}</label>\\n              </div>\\n\\n              <div>\\n                {isSelected && option.option_groups.map(nestedOptionGroup => {\\n                  const selOpts = currentOptionGroupSelectedOptions.find(sel => sel.id === option.id)\\n                  return (\\n                    <OptionGroup\\n                      key={nestedOptionGroup.id}\\n                      optionGroup={nestedOptionGroup}\\n                      currentOptionGroupSelections={selOpts ? pickSelectionsForOptionGroup(nestedOptionGroup, selOpts.option_groups) : []}\\n                      onChange={createNewParentSelections(option.id, currentOptionGroupSelectedOptions)}\\n                    />)\\n                })}\\n              </div>\\n            </>\\n          )\\n        })}\\n      </div>\\n    </div>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"4\": true,\n    \"className\": \"language-jsx\",\n    \"metastring\": \"4 56:60 file=./examples/App.js\",\n    \"56:60\": true,\n    \"file\": \"./examples/App.js\"\n  }), \"export const App = ({ menuItems }) => {\\n  return (\\n    <div className='App'>\\n      <div className='menu'>\\n        {menuItems.map(item => <MenuItem\\n          key={item.id}\\n          item={item} />)}\\n      </div>\\n    </div>\\n  )\\n}\\n\\nconst MenuItem = ({ item }) => {\\n  const [currentSelections, setCurrentSelections] = useState(getDefaultSelectedItemOptions(item.option_groups))\\n\\n  const handleSetSelections = newOptionGroupSelections => {\\n    const newSelections = currentSelections.map(opt => {\\n      if (opt.id === newOptionGroupSelections.id) {\\n        return newOptionGroupSelections\\n      }\\n      return opt\\n    })\\n\\n    setCurrentSelections(newSelections)\\n  }\\n\\n  return (\\n    <div>\\n      <span className='item-name'>{item.name}</span>\\n      {item.option_groups.map(optionGroup =>\\n        <OptionGroup\\n          key={optionGroup.id}\\n          optionGroup={optionGroup}\\n          currentOptionGroupSelections={pickSelectionsForOptionGroup(optionGroup, currentSelections)}\\n          onChange={handleSetSelections}\\n        />)}\\n    </div>\\n  )\\n}\\n\\nconst OptionGroup = ({ optionGroup, currentOptionGroupSelections, onChange }) => {\\n  const {\\n    options: currentOptionGroupSelectedOptions = []\\n  } = currentOptionGroupSelections\\n\\n  const isRadioGroup = optionGroup.min_selectable === 1 && optionGroup.max_selectable === 1\\n\\n  const createNewOptionGroupSelections = (e, changedOption) => {\\n    const newOptionGroup = { ...optionGroup }\\n    const newChangedOption = { ...changedOption }\\n\\n    if (e.target.checked) {\\n      newChangedOption.option_groups = getDefaultSelectedItemOptions(newChangedOption.option_groups)\\n    }\\n\\n    newOptionGroup.options = isRadioGroup\\n      ? [newChangedOption]\\n      : e.target.checked\\n        ? [...currentOptionGroupSelectedOptions, newChangedOption]\\n        : currentOptionGroupSelectedOptions.filter(opt => opt.id !== changedOption.id)\\n\\n    onChange(newOptionGroup)\\n  }\\n\\n  const createNewParentSelections = (parentOptionId, parentOptionSelections) => changedOptionGroup => {\\n    const newParentOptionSelections = parentOptionSelections.map(opt => {\\n      const newOpt = { ...opt }\\n      if (newOpt.id === parentOptionId) {\\n        newOpt.option_groups = newOpt.option_groups.map(og => {\\n          let newOptionGroup = { ...og }\\n          if (newOptionGroup.id === changedOptionGroup.id) {\\n            newOptionGroup = changedOptionGroup\\n          }\\n          return newOptionGroup\\n        })\\n      }\\n      return newOpt\\n    })\\n\\n    const newSelections = { ...currentOptionGroupSelections }\\n    newSelections.options = newParentOptionSelections\\n\\n    onChange(newSelections)\\n  }\\n\\n  return (\\n    <div className={'option-group'}>\\n      <div className='option-group-name'>{optionGroup.name}</div>\\n      <div className='options'>\\n        {optionGroup.options.map(option => {\\n          const isSelected = !!currentOptionGroupSelectedOptions.find(opt => option.id === opt.id)\\n          return (\\n            <>\\n              <div key={option.id} className='option'>\\n                <input type={isRadioGroup ? 'radio' : 'checkbox'}\\n                  name={optionGroup.id}\\n                  id={option.id}\\n                  value={option.id}\\n                  checked={isSelected}\\n                  onChange={e => createNewOptionGroupSelections(e, option)}\\n                />\\n                <label htmlFor={option.id}>{option.name}</label>\\n              </div>\\n\\n              <div>\\n                {isSelected && option.option_groups.map(nestedOptionGroup => {\\n                  const selOpts = currentOptionGroupSelectedOptions.find(sel => sel.id === option.id)\\n                  return (\\n                    <OptionGroup\\n                      key={nestedOptionGroup.id}\\n                      optionGroup={nestedOptionGroup}\\n                      currentOptionGroupSelections={selOpts ? pickSelectionsForOptionGroup(nestedOptionGroup, selOpts.option_groups) : []}\\n                      onChange={createNewParentSelections(option.id, currentOptionGroupSelectedOptions)}\\n                    />)\\n                })}\\n              </div>\\n            </>\\n          )\\n        })}\\n      </div>\\n    </div>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"5\": true,\n    \"62\": true,\n    \"className\": \"language-jsx\",\n    \"metastring\": \"5 62 file=./examples/App.js\",\n    \"file\": \"./examples/App.js\"\n  }), \"export const App = ({ menuItems }) => {\\n  return (\\n    <div className='App'>\\n      <div className='menu'>\\n        {menuItems.map(item => <MenuItem\\n          key={item.id}\\n          item={item} />)}\\n      </div>\\n    </div>\\n  )\\n}\\n\\nconst MenuItem = ({ item }) => {\\n  const [currentSelections, setCurrentSelections] = useState(getDefaultSelectedItemOptions(item.option_groups))\\n\\n  const handleSetSelections = newOptionGroupSelections => {\\n    const newSelections = currentSelections.map(opt => {\\n      if (opt.id === newOptionGroupSelections.id) {\\n        return newOptionGroupSelections\\n      }\\n      return opt\\n    })\\n\\n    setCurrentSelections(newSelections)\\n  }\\n\\n  return (\\n    <div>\\n      <span className='item-name'>{item.name}</span>\\n      {item.option_groups.map(optionGroup =>\\n        <OptionGroup\\n          key={optionGroup.id}\\n          optionGroup={optionGroup}\\n          currentOptionGroupSelections={pickSelectionsForOptionGroup(optionGroup, currentSelections)}\\n          onChange={handleSetSelections}\\n        />)}\\n    </div>\\n  )\\n}\\n\\nconst OptionGroup = ({ optionGroup, currentOptionGroupSelections, onChange }) => {\\n  const {\\n    options: currentOptionGroupSelectedOptions = []\\n  } = currentOptionGroupSelections\\n\\n  const isRadioGroup = optionGroup.min_selectable === 1 && optionGroup.max_selectable === 1\\n\\n  const createNewOptionGroupSelections = (e, changedOption) => {\\n    const newOptionGroup = { ...optionGroup }\\n    const newChangedOption = { ...changedOption }\\n\\n    if (e.target.checked) {\\n      newChangedOption.option_groups = getDefaultSelectedItemOptions(newChangedOption.option_groups)\\n    }\\n\\n    newOptionGroup.options = isRadioGroup\\n      ? [newChangedOption]\\n      : e.target.checked\\n        ? [...currentOptionGroupSelectedOptions, newChangedOption]\\n        : currentOptionGroupSelectedOptions.filter(opt => opt.id !== changedOption.id)\\n\\n    onChange(newOptionGroup)\\n  }\\n\\n  const createNewParentSelections = (parentOptionId, parentOptionSelections) => changedOptionGroup => {\\n    const newParentOptionSelections = parentOptionSelections.map(opt => {\\n      const newOpt = { ...opt }\\n      if (newOpt.id === parentOptionId) {\\n        newOpt.option_groups = newOpt.option_groups.map(og => {\\n          let newOptionGroup = { ...og }\\n          if (newOptionGroup.id === changedOptionGroup.id) {\\n            newOptionGroup = changedOptionGroup\\n          }\\n          return newOptionGroup\\n        })\\n      }\\n      return newOpt\\n    })\\n\\n    const newSelections = { ...currentOptionGroupSelections }\\n    newSelections.options = newParentOptionSelections\\n\\n    onChange(newSelections)\\n  }\\n\\n  return (\\n    <div className={'option-group'}>\\n      <div className='option-group-name'>{optionGroup.name}</div>\\n      <div className='options'>\\n        {optionGroup.options.map(option => {\\n          const isSelected = !!currentOptionGroupSelectedOptions.find(opt => option.id === opt.id)\\n          return (\\n            <>\\n              <div key={option.id} className='option'>\\n                <input type={isRadioGroup ? 'radio' : 'checkbox'}\\n                  name={optionGroup.id}\\n                  id={option.id}\\n                  value={option.id}\\n                  checked={isSelected}\\n                  onChange={e => createNewOptionGroupSelections(e, option)}\\n                />\\n                <label htmlFor={option.id}>{option.name}</label>\\n              </div>\\n\\n              <div>\\n                {isSelected && option.option_groups.map(nestedOptionGroup => {\\n                  const selOpts = currentOptionGroupSelectedOptions.find(sel => sel.id === option.id)\\n                  return (\\n                    <OptionGroup\\n                      key={nestedOptionGroup.id}\\n                      optionGroup={nestedOptionGroup}\\n                      currentOptionGroupSelections={selOpts ? pickSelectionsForOptionGroup(nestedOptionGroup, selOpts.option_groups) : []}\\n                      onChange={createNewParentSelections(option.id, currentOptionGroupSelectedOptions)}\\n                    />)\\n                })}\\n              </div>\\n            </>\\n          )\\n        })}\\n      </div>\\n    </div>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"6\": true,\n    \"className\": \"language-jsx\",\n    \"metastring\": \"6 16:25 file=./examples/App.js\",\n    \"16:25\": true,\n    \"file\": \"./examples/App.js\"\n  }), \"export const App = ({ menuItems }) => {\\n  return (\\n    <div className='App'>\\n      <div className='menu'>\\n        {menuItems.map(item => <MenuItem\\n          key={item.id}\\n          item={item} />)}\\n      </div>\\n    </div>\\n  )\\n}\\n\\nconst MenuItem = ({ item }) => {\\n  const [currentSelections, setCurrentSelections] = useState(getDefaultSelectedItemOptions(item.option_groups))\\n\\n  const handleSetSelections = newOptionGroupSelections => {\\n    const newSelections = currentSelections.map(opt => {\\n      if (opt.id === newOptionGroupSelections.id) {\\n        return newOptionGroupSelections\\n      }\\n      return opt\\n    })\\n\\n    setCurrentSelections(newSelections)\\n  }\\n\\n  return (\\n    <div>\\n      <span className='item-name'>{item.name}</span>\\n      {item.option_groups.map(optionGroup =>\\n        <OptionGroup\\n          key={optionGroup.id}\\n          optionGroup={optionGroup}\\n          currentOptionGroupSelections={pickSelectionsForOptionGroup(optionGroup, currentSelections)}\\n          onChange={handleSetSelections}\\n        />)}\\n    </div>\\n  )\\n}\\n\\nconst OptionGroup = ({ optionGroup, currentOptionGroupSelections, onChange }) => {\\n  const {\\n    options: currentOptionGroupSelectedOptions = []\\n  } = currentOptionGroupSelections\\n\\n  const isRadioGroup = optionGroup.min_selectable === 1 && optionGroup.max_selectable === 1\\n\\n  const createNewOptionGroupSelections = (e, changedOption) => {\\n    const newOptionGroup = { ...optionGroup }\\n    const newChangedOption = { ...changedOption }\\n\\n    if (e.target.checked) {\\n      newChangedOption.option_groups = getDefaultSelectedItemOptions(newChangedOption.option_groups)\\n    }\\n\\n    newOptionGroup.options = isRadioGroup\\n      ? [newChangedOption]\\n      : e.target.checked\\n        ? [...currentOptionGroupSelectedOptions, newChangedOption]\\n        : currentOptionGroupSelectedOptions.filter(opt => opt.id !== changedOption.id)\\n\\n    onChange(newOptionGroup)\\n  }\\n\\n  const createNewParentSelections = (parentOptionId, parentOptionSelections) => changedOptionGroup => {\\n    const newParentOptionSelections = parentOptionSelections.map(opt => {\\n      const newOpt = { ...opt }\\n      if (newOpt.id === parentOptionId) {\\n        newOpt.option_groups = newOpt.option_groups.map(og => {\\n          let newOptionGroup = { ...og }\\n          if (newOptionGroup.id === changedOptionGroup.id) {\\n            newOptionGroup = changedOptionGroup\\n          }\\n          return newOptionGroup\\n        })\\n      }\\n      return newOpt\\n    })\\n\\n    const newSelections = { ...currentOptionGroupSelections }\\n    newSelections.options = newParentOptionSelections\\n\\n    onChange(newSelections)\\n  }\\n\\n  return (\\n    <div className={'option-group'}>\\n      <div className='option-group-name'>{optionGroup.name}</div>\\n      <div className='options'>\\n        {optionGroup.options.map(option => {\\n          const isSelected = !!currentOptionGroupSelectedOptions.find(opt => option.id === opt.id)\\n          return (\\n            <>\\n              <div key={option.id} className='option'>\\n                <input type={isRadioGroup ? 'radio' : 'checkbox'}\\n                  name={optionGroup.id}\\n                  id={option.id}\\n                  value={option.id}\\n                  checked={isSelected}\\n                  onChange={e => createNewOptionGroupSelections(e, option)}\\n                />\\n                <label htmlFor={option.id}>{option.name}</label>\\n              </div>\\n\\n              <div>\\n                {isSelected && option.option_groups.map(nestedOptionGroup => {\\n                  const selOpts = currentOptionGroupSelectedOptions.find(sel => sel.id === option.id)\\n                  return (\\n                    <OptionGroup\\n                      key={nestedOptionGroup.id}\\n                      optionGroup={nestedOptionGroup}\\n                      currentOptionGroupSelections={selOpts ? pickSelectionsForOptionGroup(nestedOptionGroup, selOpts.option_groups) : []}\\n                      onChange={createNewParentSelections(option.id, currentOptionGroupSelectedOptions)}\\n                    />)\\n                })}\\n              </div>\\n            </>\\n          )\\n        })}\\n      </div>\\n    </div>\\n  )\\n}\\n\"))), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, \"Looking at that function...\", mdx(\"p\", null, \"!!NEXT!!\"), mdx(\"p\", null, \"First we make copies of objects that we are going to modify.\"), mdx(\"p\", null, \"!!NEXT!!\"), mdx(\"p\", null, \"Then, if the changed option is selected, we get the default selections for its nested option_groups so that we can show them as selected as well\"), mdx(\"p\", null, \"!!NEXT!!\"), mdx(\"p\", null, \"If it's a radio button, we can replace the current selection with the new selection. If it's a checkbox, we first determine if the change is that it has become checked or unchecked. Then, If it is checked, we add the new selection to the current selections. If it isn't checked, we filter the current selections to only those that don't match the id of the changed option.\"), mdx(\"p\", null, \"!!NEXT!!\"), mdx(\"p\", null, \"Then, we call the onChange prop and pass in our newSelections. In the case of the top-level optionGroup, the function that was passed in as the onChange prop is...\"), mdx(\"p\", null, \"!!NEXT!!\"), mdx(\"p\", null, \"The handleSetSelections function from our MenuItem component. It will take in the newSelections for the optionGroup and replace that option group in our selections state.\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"1\": true,\n    \"className\": \"language-jsx\",\n    \"metastring\": \"1 87:122 file=./examples/App.js\",\n    \"87:122\": true,\n    \"file\": \"./examples/App.js\"\n  }), \"export const App = ({ menuItems }) => {\\n  return (\\n    <div className='App'>\\n      <div className='menu'>\\n        {menuItems.map(item => <MenuItem\\n          key={item.id}\\n          item={item} />)}\\n      </div>\\n    </div>\\n  )\\n}\\n\\nconst MenuItem = ({ item }) => {\\n  const [currentSelections, setCurrentSelections] = useState(getDefaultSelectedItemOptions(item.option_groups))\\n\\n  const handleSetSelections = newOptionGroupSelections => {\\n    const newSelections = currentSelections.map(opt => {\\n      if (opt.id === newOptionGroupSelections.id) {\\n        return newOptionGroupSelections\\n      }\\n      return opt\\n    })\\n\\n    setCurrentSelections(newSelections)\\n  }\\n\\n  return (\\n    <div>\\n      <span className='item-name'>{item.name}</span>\\n      {item.option_groups.map(optionGroup =>\\n        <OptionGroup\\n          key={optionGroup.id}\\n          optionGroup={optionGroup}\\n          currentOptionGroupSelections={pickSelectionsForOptionGroup(optionGroup, currentSelections)}\\n          onChange={handleSetSelections}\\n        />)}\\n    </div>\\n  )\\n}\\n\\nconst OptionGroup = ({ optionGroup, currentOptionGroupSelections, onChange }) => {\\n  const {\\n    options: currentOptionGroupSelectedOptions = []\\n  } = currentOptionGroupSelections\\n\\n  const isRadioGroup = optionGroup.min_selectable === 1 && optionGroup.max_selectable === 1\\n\\n  const createNewOptionGroupSelections = (e, changedOption) => {\\n    const newOptionGroup = { ...optionGroup }\\n    const newChangedOption = { ...changedOption }\\n\\n    if (e.target.checked) {\\n      newChangedOption.option_groups = getDefaultSelectedItemOptions(newChangedOption.option_groups)\\n    }\\n\\n    newOptionGroup.options = isRadioGroup\\n      ? [newChangedOption]\\n      : e.target.checked\\n        ? [...currentOptionGroupSelectedOptions, newChangedOption]\\n        : currentOptionGroupSelectedOptions.filter(opt => opt.id !== changedOption.id)\\n\\n    onChange(newOptionGroup)\\n  }\\n\\n  const createNewParentSelections = (parentOptionId, parentOptionSelections) => changedOptionGroup => {\\n    const newParentOptionSelections = parentOptionSelections.map(opt => {\\n      const newOpt = { ...opt }\\n      if (newOpt.id === parentOptionId) {\\n        newOpt.option_groups = newOpt.option_groups.map(og => {\\n          let newOptionGroup = { ...og }\\n          if (newOptionGroup.id === changedOptionGroup.id) {\\n            newOptionGroup = changedOptionGroup\\n          }\\n          return newOptionGroup\\n        })\\n      }\\n      return newOpt\\n    })\\n\\n    const newSelections = { ...currentOptionGroupSelections }\\n    newSelections.options = newParentOptionSelections\\n\\n    onChange(newSelections)\\n  }\\n\\n  return (\\n    <div className={'option-group'}>\\n      <div className='option-group-name'>{optionGroup.name}</div>\\n      <div className='options'>\\n        {optionGroup.options.map(option => {\\n          const isSelected = !!currentOptionGroupSelectedOptions.find(opt => option.id === opt.id)\\n          return (\\n            <>\\n              <div key={option.id} className='option'>\\n                <input type={isRadioGroup ? 'radio' : 'checkbox'}\\n                  name={optionGroup.id}\\n                  id={option.id}\\n                  value={option.id}\\n                  checked={isSelected}\\n                  onChange={e => createNewOptionGroupSelections(e, option)}\\n                />\\n                <label htmlFor={option.id}>{option.name}</label>\\n              </div>\\n\\n              <div>\\n                {isSelected && option.option_groups.map(nestedOptionGroup => {\\n                  const selOpts = currentOptionGroupSelectedOptions.find(sel => sel.id === option.id)\\n                  return (\\n                    <OptionGroup\\n                      key={nestedOptionGroup.id}\\n                      optionGroup={nestedOptionGroup}\\n                      currentOptionGroupSelections={selOpts ? pickSelectionsForOptionGroup(nestedOptionGroup, selOpts.option_groups) : []}\\n                      onChange={createNewParentSelections(option.id, currentOptionGroupSelectedOptions)}\\n                    />)\\n                })}\\n              </div>\\n            </>\\n          )\\n        })}\\n      </div>\\n    </div>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"2\": true,\n    \"className\": \"language-jsx\",\n    \"metastring\": \"2 106:115 file=./examples/App.js\",\n    \"106:115\": true,\n    \"file\": \"./examples/App.js\"\n  }), \"export const App = ({ menuItems }) => {\\n  return (\\n    <div className='App'>\\n      <div className='menu'>\\n        {menuItems.map(item => <MenuItem\\n          key={item.id}\\n          item={item} />)}\\n      </div>\\n    </div>\\n  )\\n}\\n\\nconst MenuItem = ({ item }) => {\\n  const [currentSelections, setCurrentSelections] = useState(getDefaultSelectedItemOptions(item.option_groups))\\n\\n  const handleSetSelections = newOptionGroupSelections => {\\n    const newSelections = currentSelections.map(opt => {\\n      if (opt.id === newOptionGroupSelections.id) {\\n        return newOptionGroupSelections\\n      }\\n      return opt\\n    })\\n\\n    setCurrentSelections(newSelections)\\n  }\\n\\n  return (\\n    <div>\\n      <span className='item-name'>{item.name}</span>\\n      {item.option_groups.map(optionGroup =>\\n        <OptionGroup\\n          key={optionGroup.id}\\n          optionGroup={optionGroup}\\n          currentOptionGroupSelections={pickSelectionsForOptionGroup(optionGroup, currentSelections)}\\n          onChange={handleSetSelections}\\n        />)}\\n    </div>\\n  )\\n}\\n\\nconst OptionGroup = ({ optionGroup, currentOptionGroupSelections, onChange }) => {\\n  const {\\n    options: currentOptionGroupSelectedOptions = []\\n  } = currentOptionGroupSelections\\n\\n  const isRadioGroup = optionGroup.min_selectable === 1 && optionGroup.max_selectable === 1\\n\\n  const createNewOptionGroupSelections = (e, changedOption) => {\\n    const newOptionGroup = { ...optionGroup }\\n    const newChangedOption = { ...changedOption }\\n\\n    if (e.target.checked) {\\n      newChangedOption.option_groups = getDefaultSelectedItemOptions(newChangedOption.option_groups)\\n    }\\n\\n    newOptionGroup.options = isRadioGroup\\n      ? [newChangedOption]\\n      : e.target.checked\\n        ? [...currentOptionGroupSelectedOptions, newChangedOption]\\n        : currentOptionGroupSelectedOptions.filter(opt => opt.id !== changedOption.id)\\n\\n    onChange(newOptionGroup)\\n  }\\n\\n  const createNewParentSelections = (parentOptionId, parentOptionSelections) => changedOptionGroup => {\\n    const newParentOptionSelections = parentOptionSelections.map(opt => {\\n      const newOpt = { ...opt }\\n      if (newOpt.id === parentOptionId) {\\n        newOpt.option_groups = newOpt.option_groups.map(og => {\\n          let newOptionGroup = { ...og }\\n          if (newOptionGroup.id === changedOptionGroup.id) {\\n            newOptionGroup = changedOptionGroup\\n          }\\n          return newOptionGroup\\n        })\\n      }\\n      return newOpt\\n    })\\n\\n    const newSelections = { ...currentOptionGroupSelections }\\n    newSelections.options = newParentOptionSelections\\n\\n    onChange(newSelections)\\n  }\\n\\n  return (\\n    <div className={'option-group'}>\\n      <div className='option-group-name'>{optionGroup.name}</div>\\n      <div className='options'>\\n        {optionGroup.options.map(option => {\\n          const isSelected = !!currentOptionGroupSelectedOptions.find(opt => option.id === opt.id)\\n          return (\\n            <>\\n              <div key={option.id} className='option'>\\n                <input type={isRadioGroup ? 'radio' : 'checkbox'}\\n                  name={optionGroup.id}\\n                  id={option.id}\\n                  value={option.id}\\n                  checked={isSelected}\\n                  onChange={e => createNewOptionGroupSelections(e, option)}\\n                />\\n                <label htmlFor={option.id}>{option.name}</label>\\n              </div>\\n\\n              <div>\\n                {isSelected && option.option_groups.map(nestedOptionGroup => {\\n                  const selOpts = currentOptionGroupSelectedOptions.find(sel => sel.id === option.id)\\n                  return (\\n                    <OptionGroup\\n                      key={nestedOptionGroup.id}\\n                      optionGroup={nestedOptionGroup}\\n                      currentOptionGroupSelections={selOpts ? pickSelectionsForOptionGroup(nestedOptionGroup, selOpts.option_groups) : []}\\n                      onChange={createNewParentSelections(option.id, currentOptionGroupSelectedOptions)}\\n                    />)\\n                })}\\n              </div>\\n            </>\\n          )\\n        })}\\n      </div>\\n    </div>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"3\": true,\n    \"113\": true,\n    \"className\": \"language-jsx\",\n    \"metastring\": \"3 113 file=./examples/App.js\",\n    \"file\": \"./examples/App.js\"\n  }), \"export const App = ({ menuItems }) => {\\n  return (\\n    <div className='App'>\\n      <div className='menu'>\\n        {menuItems.map(item => <MenuItem\\n          key={item.id}\\n          item={item} />)}\\n      </div>\\n    </div>\\n  )\\n}\\n\\nconst MenuItem = ({ item }) => {\\n  const [currentSelections, setCurrentSelections] = useState(getDefaultSelectedItemOptions(item.option_groups))\\n\\n  const handleSetSelections = newOptionGroupSelections => {\\n    const newSelections = currentSelections.map(opt => {\\n      if (opt.id === newOptionGroupSelections.id) {\\n        return newOptionGroupSelections\\n      }\\n      return opt\\n    })\\n\\n    setCurrentSelections(newSelections)\\n  }\\n\\n  return (\\n    <div>\\n      <span className='item-name'>{item.name}</span>\\n      {item.option_groups.map(optionGroup =>\\n        <OptionGroup\\n          key={optionGroup.id}\\n          optionGroup={optionGroup}\\n          currentOptionGroupSelections={pickSelectionsForOptionGroup(optionGroup, currentSelections)}\\n          onChange={handleSetSelections}\\n        />)}\\n    </div>\\n  )\\n}\\n\\nconst OptionGroup = ({ optionGroup, currentOptionGroupSelections, onChange }) => {\\n  const {\\n    options: currentOptionGroupSelectedOptions = []\\n  } = currentOptionGroupSelections\\n\\n  const isRadioGroup = optionGroup.min_selectable === 1 && optionGroup.max_selectable === 1\\n\\n  const createNewOptionGroupSelections = (e, changedOption) => {\\n    const newOptionGroup = { ...optionGroup }\\n    const newChangedOption = { ...changedOption }\\n\\n    if (e.target.checked) {\\n      newChangedOption.option_groups = getDefaultSelectedItemOptions(newChangedOption.option_groups)\\n    }\\n\\n    newOptionGroup.options = isRadioGroup\\n      ? [newChangedOption]\\n      : e.target.checked\\n        ? [...currentOptionGroupSelectedOptions, newChangedOption]\\n        : currentOptionGroupSelectedOptions.filter(opt => opt.id !== changedOption.id)\\n\\n    onChange(newOptionGroup)\\n  }\\n\\n  const createNewParentSelections = (parentOptionId, parentOptionSelections) => changedOptionGroup => {\\n    const newParentOptionSelections = parentOptionSelections.map(opt => {\\n      const newOpt = { ...opt }\\n      if (newOpt.id === parentOptionId) {\\n        newOpt.option_groups = newOpt.option_groups.map(og => {\\n          let newOptionGroup = { ...og }\\n          if (newOptionGroup.id === changedOptionGroup.id) {\\n            newOptionGroup = changedOptionGroup\\n          }\\n          return newOptionGroup\\n        })\\n      }\\n      return newOpt\\n    })\\n\\n    const newSelections = { ...currentOptionGroupSelections }\\n    newSelections.options = newParentOptionSelections\\n\\n    onChange(newSelections)\\n  }\\n\\n  return (\\n    <div className={'option-group'}>\\n      <div className='option-group-name'>{optionGroup.name}</div>\\n      <div className='options'>\\n        {optionGroup.options.map(option => {\\n          const isSelected = !!currentOptionGroupSelectedOptions.find(opt => option.id === opt.id)\\n          return (\\n            <>\\n              <div key={option.id} className='option'>\\n                <input type={isRadioGroup ? 'radio' : 'checkbox'}\\n                  name={optionGroup.id}\\n                  id={option.id}\\n                  value={option.id}\\n                  checked={isSelected}\\n                  onChange={e => createNewOptionGroupSelections(e, option)}\\n                />\\n                <label htmlFor={option.id}>{option.name}</label>\\n              </div>\\n\\n              <div>\\n                {isSelected && option.option_groups.map(nestedOptionGroup => {\\n                  const selOpts = currentOptionGroupSelectedOptions.find(sel => sel.id === option.id)\\n                  return (\\n                    <OptionGroup\\n                      key={nestedOptionGroup.id}\\n                      optionGroup={nestedOptionGroup}\\n                      currentOptionGroupSelections={selOpts ? pickSelectionsForOptionGroup(nestedOptionGroup, selOpts.option_groups) : []}\\n                      onChange={createNewParentSelections(option.id, currentOptionGroupSelectedOptions)}\\n                    />)\\n                })}\\n              </div>\\n            </>\\n          )\\n        })}\\n      </div>\\n    </div>\\n  )\\n}\\n\"))), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"p\", null, \"So, that takes care of selecting or deselecting a top-level option, but we still have render and handle selecting nested option groups, and this is where we get into some recursion.\"), mdx(\"p\", null, \"!!NEXT!!\"), mdx(\"p\", null, \"For each option in our optionGroup, if the option is selected, we want to display it's nested option groups. We do that by rendering the OptionGroup component from the render method of the OptionGroup component, hence the recursion.\"), mdx(\"p\", null, \"For anyone whose not familiar with the term, recursion is the process a procedure goes through when one of the steps of the procedure involves invoking the procedure itself.\"), mdx(\"p\", null, \"!!NEXT!!\"), mdx(\"p\", null, \"The major change between the top-level OptionGroup and the nested instance is our onchange prop. We're going to pass in a different function here called createNewParentSelections. And, for anyone familiar with React, it may look like we're going to get into trouble here by passing a function execution instead of a function reference to the onChange prop, but actually, this is an example of using the functional programming concept of partial application.\")), mdx(\"hr\", null), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Partial application can be described as taking a function that accepts some number of arguments, binding values to one or more of those arguments, and returning a new function that only accepts the remaining, un-bound arguments.\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"- \", mdx(\"a\", _extends({\n    parentName: \"em\"\n  }, {\n    \"href\": \"http://benalman.com/news/2012/09/partial-application-in-javascript/\"\n  }), \"Ben Alman\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"1\": true,\n    \"className\": \"language-jsx\",\n    \"metastring\": \"1 65:84 file=./examples/App.js\",\n    \"65:84\": true,\n    \"file\": \"./examples/App.js\"\n  }), \"export const App = ({ menuItems }) => {\\n  return (\\n    <div className='App'>\\n      <div className='menu'>\\n        {menuItems.map(item => <MenuItem\\n          key={item.id}\\n          item={item} />)}\\n      </div>\\n    </div>\\n  )\\n}\\n\\nconst MenuItem = ({ item }) => {\\n  const [currentSelections, setCurrentSelections] = useState(getDefaultSelectedItemOptions(item.option_groups))\\n\\n  const handleSetSelections = newOptionGroupSelections => {\\n    const newSelections = currentSelections.map(opt => {\\n      if (opt.id === newOptionGroupSelections.id) {\\n        return newOptionGroupSelections\\n      }\\n      return opt\\n    })\\n\\n    setCurrentSelections(newSelections)\\n  }\\n\\n  return (\\n    <div>\\n      <span className='item-name'>{item.name}</span>\\n      {item.option_groups.map(optionGroup =>\\n        <OptionGroup\\n          key={optionGroup.id}\\n          optionGroup={optionGroup}\\n          currentOptionGroupSelections={pickSelectionsForOptionGroup(optionGroup, currentSelections)}\\n          onChange={handleSetSelections}\\n        />)}\\n    </div>\\n  )\\n}\\n\\nconst OptionGroup = ({ optionGroup, currentOptionGroupSelections, onChange }) => {\\n  const {\\n    options: currentOptionGroupSelectedOptions = []\\n  } = currentOptionGroupSelections\\n\\n  const isRadioGroup = optionGroup.min_selectable === 1 && optionGroup.max_selectable === 1\\n\\n  const createNewOptionGroupSelections = (e, changedOption) => {\\n    const newOptionGroup = { ...optionGroup }\\n    const newChangedOption = { ...changedOption }\\n\\n    if (e.target.checked) {\\n      newChangedOption.option_groups = getDefaultSelectedItemOptions(newChangedOption.option_groups)\\n    }\\n\\n    newOptionGroup.options = isRadioGroup\\n      ? [newChangedOption]\\n      : e.target.checked\\n        ? [...currentOptionGroupSelectedOptions, newChangedOption]\\n        : currentOptionGroupSelectedOptions.filter(opt => opt.id !== changedOption.id)\\n\\n    onChange(newOptionGroup)\\n  }\\n\\n  const createNewParentSelections = (parentOptionId, parentOptionSelections) => changedOptionGroup => {\\n    const newParentOptionSelections = parentOptionSelections.map(opt => {\\n      const newOpt = { ...opt }\\n      if (newOpt.id === parentOptionId) {\\n        newOpt.option_groups = newOpt.option_groups.map(og => {\\n          let newOptionGroup = { ...og }\\n          if (newOptionGroup.id === changedOptionGroup.id) {\\n            newOptionGroup = changedOptionGroup\\n          }\\n          return newOptionGroup\\n        })\\n      }\\n      return newOpt\\n    })\\n\\n    const newSelections = { ...currentOptionGroupSelections }\\n    newSelections.options = newParentOptionSelections\\n\\n    onChange(newSelections)\\n  }\\n\\n  return (\\n    <div className={'option-group'}>\\n      <div className='option-group-name'>{optionGroup.name}</div>\\n      <div className='options'>\\n        {optionGroup.options.map(option => {\\n          const isSelected = !!currentOptionGroupSelectedOptions.find(opt => option.id === opt.id)\\n          return (\\n            <>\\n              <div key={option.id} className='option'>\\n                <input type={isRadioGroup ? 'radio' : 'checkbox'}\\n                  name={optionGroup.id}\\n                  id={option.id}\\n                  value={option.id}\\n                  checked={isSelected}\\n                  onChange={e => createNewOptionGroupSelections(e, option)}\\n                />\\n                <label htmlFor={option.id}>{option.name}</label>\\n              </div>\\n\\n              <div>\\n                {isSelected && option.option_groups.map(nestedOptionGroup => {\\n                  const selOpts = currentOptionGroupSelectedOptions.find(sel => sel.id === option.id)\\n                  return (\\n                    <OptionGroup\\n                      key={nestedOptionGroup.id}\\n                      optionGroup={nestedOptionGroup}\\n                      currentOptionGroupSelections={selOpts ? pickSelectionsForOptionGroup(nestedOptionGroup, selOpts.option_groups) : []}\\n                      onChange={createNewParentSelections(option.id, currentOptionGroupSelectedOptions)}\\n                    />)\\n                })}\\n              </div>\\n            </>\\n          )\\n        })}\\n      </div>\\n    </div>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"2\": true,\n    \"65\": true,\n    \"className\": \"language-jsx\",\n    \"metastring\": \"2 65 file=./examples/App.js\",\n    \"file\": \"./examples/App.js\"\n  }), \"export const App = ({ menuItems }) => {\\n  return (\\n    <div className='App'>\\n      <div className='menu'>\\n        {menuItems.map(item => <MenuItem\\n          key={item.id}\\n          item={item} />)}\\n      </div>\\n    </div>\\n  )\\n}\\n\\nconst MenuItem = ({ item }) => {\\n  const [currentSelections, setCurrentSelections] = useState(getDefaultSelectedItemOptions(item.option_groups))\\n\\n  const handleSetSelections = newOptionGroupSelections => {\\n    const newSelections = currentSelections.map(opt => {\\n      if (opt.id === newOptionGroupSelections.id) {\\n        return newOptionGroupSelections\\n      }\\n      return opt\\n    })\\n\\n    setCurrentSelections(newSelections)\\n  }\\n\\n  return (\\n    <div>\\n      <span className='item-name'>{item.name}</span>\\n      {item.option_groups.map(optionGroup =>\\n        <OptionGroup\\n          key={optionGroup.id}\\n          optionGroup={optionGroup}\\n          currentOptionGroupSelections={pickSelectionsForOptionGroup(optionGroup, currentSelections)}\\n          onChange={handleSetSelections}\\n        />)}\\n    </div>\\n  )\\n}\\n\\nconst OptionGroup = ({ optionGroup, currentOptionGroupSelections, onChange }) => {\\n  const {\\n    options: currentOptionGroupSelectedOptions = []\\n  } = currentOptionGroupSelections\\n\\n  const isRadioGroup = optionGroup.min_selectable === 1 && optionGroup.max_selectable === 1\\n\\n  const createNewOptionGroupSelections = (e, changedOption) => {\\n    const newOptionGroup = { ...optionGroup }\\n    const newChangedOption = { ...changedOption }\\n\\n    if (e.target.checked) {\\n      newChangedOption.option_groups = getDefaultSelectedItemOptions(newChangedOption.option_groups)\\n    }\\n\\n    newOptionGroup.options = isRadioGroup\\n      ? [newChangedOption]\\n      : e.target.checked\\n        ? [...currentOptionGroupSelectedOptions, newChangedOption]\\n        : currentOptionGroupSelectedOptions.filter(opt => opt.id !== changedOption.id)\\n\\n    onChange(newOptionGroup)\\n  }\\n\\n  const createNewParentSelections = (parentOptionId, parentOptionSelections) => changedOptionGroup => {\\n    const newParentOptionSelections = parentOptionSelections.map(opt => {\\n      const newOpt = { ...opt }\\n      if (newOpt.id === parentOptionId) {\\n        newOpt.option_groups = newOpt.option_groups.map(og => {\\n          let newOptionGroup = { ...og }\\n          if (newOptionGroup.id === changedOptionGroup.id) {\\n            newOptionGroup = changedOptionGroup\\n          }\\n          return newOptionGroup\\n        })\\n      }\\n      return newOpt\\n    })\\n\\n    const newSelections = { ...currentOptionGroupSelections }\\n    newSelections.options = newParentOptionSelections\\n\\n    onChange(newSelections)\\n  }\\n\\n  return (\\n    <div className={'option-group'}>\\n      <div className='option-group-name'>{optionGroup.name}</div>\\n      <div className='options'>\\n        {optionGroup.options.map(option => {\\n          const isSelected = !!currentOptionGroupSelectedOptions.find(opt => option.id === opt.id)\\n          return (\\n            <>\\n              <div key={option.id} className='option'>\\n                <input type={isRadioGroup ? 'radio' : 'checkbox'}\\n                  name={optionGroup.id}\\n                  id={option.id}\\n                  value={option.id}\\n                  checked={isSelected}\\n                  onChange={e => createNewOptionGroupSelections(e, option)}\\n                />\\n                <label htmlFor={option.id}>{option.name}</label>\\n              </div>\\n\\n              <div>\\n                {isSelected && option.option_groups.map(nestedOptionGroup => {\\n                  const selOpts = currentOptionGroupSelectedOptions.find(sel => sel.id === option.id)\\n                  return (\\n                    <OptionGroup\\n                      key={nestedOptionGroup.id}\\n                      optionGroup={nestedOptionGroup}\\n                      currentOptionGroupSelections={selOpts ? pickSelectionsForOptionGroup(nestedOptionGroup, selOpts.option_groups) : []}\\n                      onChange={createNewParentSelections(option.id, currentOptionGroupSelectedOptions)}\\n                    />)\\n                })}\\n              </div>\\n            </>\\n          )\\n        })}\\n      </div>\\n    </div>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"1\": true,\n    \"className\": \"language-jsx\",\n    \"metastring\": \"1 65:84 file=./examples/App.js\",\n    \"65:84\": true,\n    \"file\": \"./examples/App.js\"\n  }), \"export const App = ({ menuItems }) => {\\n  return (\\n    <div className='App'>\\n      <div className='menu'>\\n        {menuItems.map(item => <MenuItem\\n          key={item.id}\\n          item={item} />)}\\n      </div>\\n    </div>\\n  )\\n}\\n\\nconst MenuItem = ({ item }) => {\\n  const [currentSelections, setCurrentSelections] = useState(getDefaultSelectedItemOptions(item.option_groups))\\n\\n  const handleSetSelections = newOptionGroupSelections => {\\n    const newSelections = currentSelections.map(opt => {\\n      if (opt.id === newOptionGroupSelections.id) {\\n        return newOptionGroupSelections\\n      }\\n      return opt\\n    })\\n\\n    setCurrentSelections(newSelections)\\n  }\\n\\n  return (\\n    <div>\\n      <span className='item-name'>{item.name}</span>\\n      {item.option_groups.map(optionGroup =>\\n        <OptionGroup\\n          key={optionGroup.id}\\n          optionGroup={optionGroup}\\n          currentOptionGroupSelections={pickSelectionsForOptionGroup(optionGroup, currentSelections)}\\n          onChange={handleSetSelections}\\n        />)}\\n    </div>\\n  )\\n}\\n\\nconst OptionGroup = ({ optionGroup, currentOptionGroupSelections, onChange }) => {\\n  const {\\n    options: currentOptionGroupSelectedOptions = []\\n  } = currentOptionGroupSelections\\n\\n  const isRadioGroup = optionGroup.min_selectable === 1 && optionGroup.max_selectable === 1\\n\\n  const createNewOptionGroupSelections = (e, changedOption) => {\\n    const newOptionGroup = { ...optionGroup }\\n    const newChangedOption = { ...changedOption }\\n\\n    if (e.target.checked) {\\n      newChangedOption.option_groups = getDefaultSelectedItemOptions(newChangedOption.option_groups)\\n    }\\n\\n    newOptionGroup.options = isRadioGroup\\n      ? [newChangedOption]\\n      : e.target.checked\\n        ? [...currentOptionGroupSelectedOptions, newChangedOption]\\n        : currentOptionGroupSelectedOptions.filter(opt => opt.id !== changedOption.id)\\n\\n    onChange(newOptionGroup)\\n  }\\n\\n  const createNewParentSelections = (parentOptionId, parentOptionSelections) => changedOptionGroup => {\\n    const newParentOptionSelections = parentOptionSelections.map(opt => {\\n      const newOpt = { ...opt }\\n      if (newOpt.id === parentOptionId) {\\n        newOpt.option_groups = newOpt.option_groups.map(og => {\\n          let newOptionGroup = { ...og }\\n          if (newOptionGroup.id === changedOptionGroup.id) {\\n            newOptionGroup = changedOptionGroup\\n          }\\n          return newOptionGroup\\n        })\\n      }\\n      return newOpt\\n    })\\n\\n    const newSelections = { ...currentOptionGroupSelections }\\n    newSelections.options = newParentOptionSelections\\n\\n    onChange(newSelections)\\n  }\\n\\n  return (\\n    <div className={'option-group'}>\\n      <div className='option-group-name'>{optionGroup.name}</div>\\n      <div className='options'>\\n        {optionGroup.options.map(option => {\\n          const isSelected = !!currentOptionGroupSelectedOptions.find(opt => option.id === opt.id)\\n          return (\\n            <>\\n              <div key={option.id} className='option'>\\n                <input type={isRadioGroup ? 'radio' : 'checkbox'}\\n                  name={optionGroup.id}\\n                  id={option.id}\\n                  value={option.id}\\n                  checked={isSelected}\\n                  onChange={e => createNewOptionGroupSelections(e, option)}\\n                />\\n                <label htmlFor={option.id}>{option.name}</label>\\n              </div>\\n\\n              <div>\\n                {isSelected && option.option_groups.map(nestedOptionGroup => {\\n                  const selOpts = currentOptionGroupSelectedOptions.find(sel => sel.id === option.id)\\n                  return (\\n                    <OptionGroup\\n                      key={nestedOptionGroup.id}\\n                      optionGroup={nestedOptionGroup}\\n                      currentOptionGroupSelections={selOpts ? pickSelectionsForOptionGroup(nestedOptionGroup, selOpts.option_groups) : []}\\n                      onChange={createNewParentSelections(option.id, currentOptionGroupSelectedOptions)}\\n                    />)\\n                })}\\n              </div>\\n            </>\\n          )\\n        })}\\n      </div>\\n    </div>\\n  )\\n}\\n\"))), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"p\", null, \"So let's look at how we're using partial application to bind values to the function that we passed to our onChange handler.\"), mdx(\"p\", null, \"!!NEXT!!\"), mdx(\"p\", null, \"Using the fat arrow syntax, we define a function that takes in parentOptionId and parentOptionSelections, and returns a new function that already has these values bound to it. The new function, when executed by the onChange function in our component, will only take in the changedOptionGroup. We do this because when this returned function is executed, we wouldn't have the context we need of the parent option. I'll demostrate what I mean by that when we get into the demo.\"), mdx(\"p\", null, \"!!NEXT!!\"), mdx(\"p\", null, \"So why do we need this nested handler if we already wrote one? The other handler will still be used as the first step in every execution of the OptionGroup component's onChange prop, but it will only mutate the optionGroup's data. We also need a way for each nested option group to mutate its containing parent option group, then pass that up to the MenuItem component where our whole item's state is stored.\")), mdx(\"hr\", null), mdx(\"h3\", null, \"Evaluating Other Approaches\"), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"p\", null, \"Another approach we could have taken was instead of keeping a separate state of the selections, we could have added a boolean property to every option in the original menu_item structure that says whether or not the option is selected. That's a valid solution, but one disadvantage to doing that is that we'll we using this data to display all the selected options for the item in a user's cart, so we would have to map over alot more properties to do that. Also, we will untimately only be sending selected options in our request to the backend to ask the favor. Storing just the selections upfront allows us to prevent having to get our data into the proper structure down the line.\"), mdx(\"p\", null, \"Another issue this approach attempts to handle is that React can have performance issues with large sets of data. Because of how configurable the menus can be, the menus themselves can be huge JSON. This allows us to only have to make changes to a smaller object.\")), mdx(\"hr\", null), mdx(\"h1\", null, \"Check Out The Repos\"), mdx(\"h3\", null, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"https://github.com/gilomen2/options-all-the-way\"\n  }), \"https://github.com/gilomen2/options-all-the-way\")), mdx(\"h3\", null, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"https://github.com/gilomen2/options-presentation\"\n  }), \"https://github.com/gilomen2/options-presentation\")), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"p\", null, \"Shoutout to mdx-deck and code-surfer, which made the\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"66fea28f-72db-528b-8642-74a107b8d4e6","slug":"","title":"Options All the Way Down"}}}